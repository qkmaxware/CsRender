{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Qkmaxware.Rendering is a C# library for 3D software based rendering. Since Rendering is built off of .Net Standard 2.1 , it is compatible with the .Net Framework as well as .Net Core . This site serves as a resource for installing and using the Rendering Library.","title":"Welcome"},{"location":"#welcome","text":"Qkmaxware.Rendering is a C# library for 3D software based rendering. Since Rendering is built off of .Net Standard 2.1 , it is compatible with the .Net Framework as well as .Net Core . This site serves as a resource for installing and using the Rendering Library.","title":"Welcome"},{"location":"installing/","text":"Installation Qkmaxware.Rendering is distributed as a Nuget package via Github's Package Repository . Github Access Token Github requires that all users will need to authenticate with Github in order to download packages. At the time of writing, the process for creating such a token located on docs.github.com . When creating this token make sure that it permissions to read:packages enabled which is required to download github packages. Adding Package Create an empty project or use an existing .Net project dotnet new console Create a new file at the root of the project named nuget.config and paste the following xml into it. Replace %USERNAME% with your Github username and %ACCESS_TOKEN% with the access token that you created previously. <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"qkmaxware\" value=\"https://nuget.pkg.github.com/qkmaxware/index.json\" /> </packageSources> <packageSourceCredentials> <qkmaxware> <add key=\"Username\" value=\"%USERNAME%\" /> <add key=\"ClearTextPassword\" value=\"%ACCESS_TOKEN%\" /> </qkmaxware> </packageSourceCredentials> </configuration> Add the Qkmaxware.Rendering package, make sure to specify Github as the package source dotnet add package Qkmaxware.Rendering --source \"https://nuget.pkg.github.com/qkmaxware/index.json\"","title":"Installation"},{"location":"installing/#installation","text":"Qkmaxware.Rendering is distributed as a Nuget package via Github's Package Repository .","title":"Installation"},{"location":"installing/#github-access-token","text":"Github requires that all users will need to authenticate with Github in order to download packages. At the time of writing, the process for creating such a token located on docs.github.com . When creating this token make sure that it permissions to read:packages enabled which is required to download github packages.","title":"Github Access Token"},{"location":"installing/#adding-package","text":"Create an empty project or use an existing .Net project dotnet new console Create a new file at the root of the project named nuget.config and paste the following xml into it. Replace %USERNAME% with your Github username and %ACCESS_TOKEN% with the access token that you created previously. <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"qkmaxware\" value=\"https://nuget.pkg.github.com/qkmaxware/index.json\" /> </packageSources> <packageSourceCredentials> <qkmaxware> <add key=\"Username\" value=\"%USERNAME%\" /> <add key=\"ClearTextPassword\" value=\"%ACCESS_TOKEN%\" /> </qkmaxware> </packageSourceCredentials> </configuration> Add the Qkmaxware.Rendering package, make sure to specify Github as the package source dotnet add package Qkmaxware.Rendering --source \"https://nuget.pkg.github.com/qkmaxware/index.json\"","title":"Adding Package"},{"location":"references/","text":"References Related Pages Functions Namespaces Classes Files","title":"References"},{"location":"references/#references","text":"Related Pages Functions Namespaces Classes Files","title":"References"},{"location":"using/","text":"Usage Scene management All scene management start off from the Scene class which acts as the root of a hierarchy of scene objects, not all of which are able to be rendered to the camera. Scene scene = new Scene(); We can attach SceneNode objects to the scene and to other scene nodes in order to fill out the scene hierarchy. Currently there are 3 types of scene nodes. The base SceneNode class is used purely to construct the hierarchy and provides no additional functionality. The Renderable class is used to render a geometric object to the camera. This object can be provided with a UV map which is used to map geometry vertices to texture coordinates as well as a material which defines how the object is coloured. Additionally the Animator class is used with an AnimatedScene to apply actions to nodes between animation frames which is covered the section Animated Scenes . SceneNode emptyNode = new SceneNode(); scene.Add(emptyNode); Renderable mesh = new Renderable( mesh: new Sphere(radius: 1, centre: Vec3.Zero), uv: null, material: new Wireframe(Color.Red) ); emptyNode.Add(mesh); Rendering Rendering is performed by any camera object. This framework only implements a simple \"perspective\" camera using the PerspectiveCamera class. When the camera renders a scene the camera's PixelBuffer property will contain the pixels of the image. BaseCamera camera = new PerspectiveCamera(Resolutions.Aspect4x3.Display480p); camera.Render(scene); Since the camera does not actually create an image, you may use whatever framework you wish for saving the images to file or creating video files. For instance, using my Media library, this is one way that an image file could be saved from the results of a camera rendering. TgaSerializer serializer = new TgaSerializer(); using (var writer = new BinaryWriter(\"myrender.tga\", FileMode.Create))) { serializer.Serialize(writer, camera.PixelBuffer.GetSampler()); } Materials Rendering will only render Renderable scene nodes to the camera's PixelBuffer . To control how these objects are rendered, materials can be defined. Materials like Wireframe will only render a the edges of a mesh whereas UnlitColour will render all faces but as a solid colour. Materials have 3 customizable methods Vert , Edge , and Fragment similar to how shaders work in other frameworks. The Vert method is called on every vertex being rendered. The Edge method is called for all pixels lying on the edge of a rendered triangle. The Fragment method is called for all pixels on the surface of a triangular face. public class CustomMaterial : Material { public override Color Vert(ShaderVariables variables) {...} public override Color Edge(ShaderVariables variables) {...} public override Color Fragment(ShaderVariables variables) {...} } Shader variables can be used to help determine what colour should be returned from the material for a given pixel. Some of the properties passed to the material through the ShaderVariables object include: Property Description ModelToWorld Matrix from the current object being rendered to world space WorldToModel Matrix from world space to the current object being rendered WorldPosition Position of the pixel in world space WorldCameraPosition Position of the camera in world space ScreenPixel Position of the pixel on screen being pushed to UVCoordinates Coordinates for UV mapping the current pixel LightSources Currently active light sources in the scene to account for when rendering Animated Scenes More often then not, one would want to animate a scene and export each frame to file or to an animation. This starts from the AnimatedScene class which allows for one to enumerate through animations frame by frame. Assigning to the FPS property of the animation will adjust how animated behaviours move between frames. AnimatedScene animation = new AnimatedScene(camera, scene); To create animated behaviours the IAnimator interface can be applied to SceneNode classes in order to apply events on each frame. Each IAnimator can choose to implement one of three methods. OnEarlyUpdate , OnUpdate , and OnLateUpdate which are called in sequence each frame. Create an implementor of the IAnimator interface to define how the animation plays. The example IAnimator below will cause the node to bob vertically up and down over time. public class BobbingAnimator : SceneNode, IAnimator { public double Amplitude = 1; public double SpeedFactor = 1; private TimeSpan playTime = TimeSpan.Zero; public void OnUpdate(TimeSpan dt) { playTime += SpeedFactor * dt; var old = this.Transform.Position; var @new = Transformation.Offset(new Vector3(old.X, old.Y, Amplitude * Math.Sin(playTime.TotalSeconds))); this.Transform = @new; } } var bobber = new BobbingAnimator(); bobber.Add(mesh); scene.Add(bobber); To export animations, simple iterate over the frames of the animation that you want to keep an export them to file. Similar to how rendering works for a single camera, a third part library like my Media library can be used to export the frames to image files. TgaSerializer serializer = new TgaSerializer(); var frameId = 0; // Save 30 frames of the animation to file foreach (var frame in animation.Take(30)) { using (var writer = new BinaryWriter($\"render.{frameId++}.tga\", FileMode.Create))) { serializer.Serialize(writer, frame.GetSampler()); } }","title":"Usage"},{"location":"using/#usage","text":"","title":"Usage"},{"location":"using/#scene-management","text":"All scene management start off from the Scene class which acts as the root of a hierarchy of scene objects, not all of which are able to be rendered to the camera. Scene scene = new Scene(); We can attach SceneNode objects to the scene and to other scene nodes in order to fill out the scene hierarchy. Currently there are 3 types of scene nodes. The base SceneNode class is used purely to construct the hierarchy and provides no additional functionality. The Renderable class is used to render a geometric object to the camera. This object can be provided with a UV map which is used to map geometry vertices to texture coordinates as well as a material which defines how the object is coloured. Additionally the Animator class is used with an AnimatedScene to apply actions to nodes between animation frames which is covered the section Animated Scenes . SceneNode emptyNode = new SceneNode(); scene.Add(emptyNode); Renderable mesh = new Renderable( mesh: new Sphere(radius: 1, centre: Vec3.Zero), uv: null, material: new Wireframe(Color.Red) ); emptyNode.Add(mesh);","title":"Scene management"},{"location":"using/#rendering","text":"Rendering is performed by any camera object. This framework only implements a simple \"perspective\" camera using the PerspectiveCamera class. When the camera renders a scene the camera's PixelBuffer property will contain the pixels of the image. BaseCamera camera = new PerspectiveCamera(Resolutions.Aspect4x3.Display480p); camera.Render(scene); Since the camera does not actually create an image, you may use whatever framework you wish for saving the images to file or creating video files. For instance, using my Media library, this is one way that an image file could be saved from the results of a camera rendering. TgaSerializer serializer = new TgaSerializer(); using (var writer = new BinaryWriter(\"myrender.tga\", FileMode.Create))) { serializer.Serialize(writer, camera.PixelBuffer.GetSampler()); }","title":"Rendering"},{"location":"using/#materials","text":"Rendering will only render Renderable scene nodes to the camera's PixelBuffer . To control how these objects are rendered, materials can be defined. Materials like Wireframe will only render a the edges of a mesh whereas UnlitColour will render all faces but as a solid colour. Materials have 3 customizable methods Vert , Edge , and Fragment similar to how shaders work in other frameworks. The Vert method is called on every vertex being rendered. The Edge method is called for all pixels lying on the edge of a rendered triangle. The Fragment method is called for all pixels on the surface of a triangular face. public class CustomMaterial : Material { public override Color Vert(ShaderVariables variables) {...} public override Color Edge(ShaderVariables variables) {...} public override Color Fragment(ShaderVariables variables) {...} } Shader variables can be used to help determine what colour should be returned from the material for a given pixel. Some of the properties passed to the material through the ShaderVariables object include: Property Description ModelToWorld Matrix from the current object being rendered to world space WorldToModel Matrix from world space to the current object being rendered WorldPosition Position of the pixel in world space WorldCameraPosition Position of the camera in world space ScreenPixel Position of the pixel on screen being pushed to UVCoordinates Coordinates for UV mapping the current pixel LightSources Currently active light sources in the scene to account for when rendering","title":"Materials"},{"location":"using/#animated-scenes","text":"More often then not, one would want to animate a scene and export each frame to file or to an animation. This starts from the AnimatedScene class which allows for one to enumerate through animations frame by frame. Assigning to the FPS property of the animation will adjust how animated behaviours move between frames. AnimatedScene animation = new AnimatedScene(camera, scene); To create animated behaviours the IAnimator interface can be applied to SceneNode classes in order to apply events on each frame. Each IAnimator can choose to implement one of three methods. OnEarlyUpdate , OnUpdate , and OnLateUpdate which are called in sequence each frame. Create an implementor of the IAnimator interface to define how the animation plays. The example IAnimator below will cause the node to bob vertically up and down over time. public class BobbingAnimator : SceneNode, IAnimator { public double Amplitude = 1; public double SpeedFactor = 1; private TimeSpan playTime = TimeSpan.Zero; public void OnUpdate(TimeSpan dt) { playTime += SpeedFactor * dt; var old = this.Transform.Position; var @new = Transformation.Offset(new Vector3(old.X, old.Y, Amplitude * Math.Sin(playTime.TotalSeconds))); this.Transform = @new; } } var bobber = new BobbingAnimator(); bobber.Add(mesh); scene.Add(bobber); To export animations, simple iterate over the frames of the animation that you want to keep an export them to file. Similar to how rendering works for a single camera, a third part library like my Media library can be used to export the frames to image files. TgaSerializer serializer = new TgaSerializer(); var frameId = 0; // Save 30 frames of the animation to file foreach (var frame in animation.Take(30)) { using (var writer = new BinaryWriter($\"render.{frameId++}.tga\", FileMode.Create))) { serializer.Serialize(writer, frame.GetSampler()); } }","title":"Animated Scenes"},{"location":"doxygen/_angle_8cs/","text":"File Angle.cs File List > Render > src > Angle.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace System Classes Type Name class Angle Angle manipulations The documentation for this class was generated from the following file Render/src/Angle.cs","title":"File Angle.cs"},{"location":"doxygen/_angle_8cs/#file-anglecs","text":"File List > Render > src > Angle.cs Go to the source code of this file.","title":"File Angle.cs"},{"location":"doxygen/_angle_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace System","title":"Namespaces"},{"location":"doxygen/_angle_8cs/#classes","text":"Type Name class Angle Angle manipulations The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Classes"},{"location":"doxygen/_angle_8cs_source/","text":"File Angle.cs File List > Render > src > Angle.cs Go to the documentation of this file. using System; namespace Qkmaxware.Rendering { public static class Angle { public static readonly double Deg2Rad = Math.PI / 180.0; public static readonly double Rad2Deg = 180.0 / Math.PI; } }","title":"File Angle.cs"},{"location":"doxygen/_angle_8cs_source/#file-anglecs","text":"File List > Render > src > Angle.cs Go to the documentation of this file. using System; namespace Qkmaxware.Rendering { public static class Angle { public static readonly double Deg2Rad = Math.PI / 180.0; public static readonly double Rad2Deg = 180.0 / Math.PI; } }","title":"File Angle.cs"},{"location":"doxygen/_animation_8cs/","text":"File Animation.cs File List > Render > src > Animation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace Collections namespace Generic namespace Drawing namespace Linq Classes Type Name class AnimatedScene Animate all animated scene nodes across several frames interface IAnimator Animated scene node The documentation for this class was generated from the following file Render/src/Animation.cs","title":"File Animation.cs"},{"location":"doxygen/_animation_8cs/#file-animationcs","text":"File List > Render > src > Animation.cs Go to the source code of this file.","title":"File Animation.cs"},{"location":"doxygen/_animation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace Collections namespace Generic namespace Drawing namespace Linq","title":"Namespaces"},{"location":"doxygen/_animation_8cs/#classes","text":"Type Name class AnimatedScene Animate all animated scene nodes across several frames interface IAnimator Animated scene node The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Classes"},{"location":"doxygen/_animation_8cs_source/","text":"File Animation.cs File List > Render > src > Animation.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using System.Drawing; using System.Linq; namespace Qkmaxware.Rendering { public interface IAnimator { void OnEarlyUpdate(TimeSpan dt) {} void OnUpdate(TimeSpan dt) {} void OnLateUpdate(TimeSpan dt) {} } public class AnimatedScene : IEnumerable<Color[,]> { public Scene Scene; public BaseCamera Camera {get; private set;} public int FPS = 30; public TimeSpan DeltaTime => TimeSpan.FromSeconds(1.0/FPS); public AnimatedScene(Scene scene) : this(new PerspectiveCamera(new Size(640, 480)), scene) {} public AnimatedScene(BaseCamera camera, Scene scene) { this.Camera = camera; this.Scene = scene; } public IEnumerator<Color[,]> GetEnumerator() { while(true) { var objects = Scene.OfType<IAnimator>(); var dt = DeltaTime; foreach (var obj in objects) { obj.OnEarlyUpdate(dt); } foreach (var obj in objects) { obj.OnUpdate(dt); } foreach (var obj in objects) { obj.OnLateUpdate(dt); } Camera.Render(Scene); yield return Camera.PixelBuffer; } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } }","title":"File Animation.cs"},{"location":"doxygen/_animation_8cs_source/#file-animationcs","text":"File List > Render > src > Animation.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using System.Drawing; using System.Linq; namespace Qkmaxware.Rendering { public interface IAnimator { void OnEarlyUpdate(TimeSpan dt) {} void OnUpdate(TimeSpan dt) {} void OnLateUpdate(TimeSpan dt) {} } public class AnimatedScene : IEnumerable<Color[,]> { public Scene Scene; public BaseCamera Camera {get; private set;} public int FPS = 30; public TimeSpan DeltaTime => TimeSpan.FromSeconds(1.0/FPS); public AnimatedScene(Scene scene) : this(new PerspectiveCamera(new Size(640, 480)), scene) {} public AnimatedScene(BaseCamera camera, Scene scene) { this.Camera = camera; this.Scene = scene; } public IEnumerator<Color[,]> GetEnumerator() { while(true) { var objects = Scene.OfType<IAnimator>(); var dt = DeltaTime; foreach (var obj in objects) { obj.OnEarlyUpdate(dt); } foreach (var obj in objects) { obj.OnUpdate(dt); } foreach (var obj in objects) { obj.OnLateUpdate(dt); } Camera.Render(Scene); yield return Camera.PixelBuffer; } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } }","title":"File Animation.cs"},{"location":"doxygen/_base_camera_8cs/","text":"File BaseCamera.cs File List > Render > src > BaseCamera.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Geometry namespace Rendering 3D Soft-rendering Classes Type Name class BaseCamera Base class for a camera that can render a scene The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"File BaseCamera.cs"},{"location":"doxygen/_base_camera_8cs/#file-basecameracs","text":"File List > Render > src > BaseCamera.cs Go to the source code of this file.","title":"File BaseCamera.cs"},{"location":"doxygen/_base_camera_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Geometry namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_base_camera_8cs/#classes","text":"Type Name class BaseCamera Base class for a camera that can render a scene The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"Classes"},{"location":"doxygen/_base_camera_8cs_source/","text":"File BaseCamera.cs File List > Render > src > BaseCamera.cs Go to the documentation of this file. using System; using System.Linq; using System.Drawing; using Qkmaxware.Geometry; using System.Collections.Generic; namespace Qkmaxware.Rendering { public abstract class BaseCamera : SceneNode { public Size Size {get; private set;} public Color[,] PixelBuffer {get; private set;} public double[,] DepthBuffer {get; private set;} public Skybox Skybox {get; private set;} = new Skybox(); protected readonly double focallength = 1; protected double nearClipDistance = 0.1; protected double farClipDistance = 1000; public BaseCamera(Size size) { this.Size = size; this.PixelBuffer = new Color[size.Height,size.Width]; this.DepthBuffer = new double[size.Height,size.Width]; Dirty(); } public void SetClippingDistance(double near, double far) { this.nearClipDistance = Math.Min(near, far); this.farClipDistance = Math.Max(near, far); Dirty(); } protected abstract void Dirty(); public abstract Vec3 WorldToScreenPoint(Vec3 world); public abstract Vec3 ScreenToWorldPoint(Vec2 screen); private void ClearPixels() { for (int i = 0; i < PixelBuffer.GetLength(0); i++) for (int j = 0; j < PixelBuffer.GetLength(1); j++) PixelBuffer[i, j] = Skybox.GetPixel(this, j, i); } private void ClearDepth() { for (int i = 0; i < DepthBuffer.GetLength(0); i++) for (int j = 0; j < DepthBuffer.GetLength(1); j++) DepthBuffer[i, j] = farClipDistance; } public void Render(Scene scene) { // Clean data ClearPixels(); ClearDepth(); // Set constant shader properties var vars = new ShaderVariables(); vars.WorldCameraPosition = this.Position; vars.LightSources = scene.OfType<LightSource>().ToList().AsReadOnly(); // Loop over all models foreach (var renderable in scene.OfType<Renderable>()) { vars.ModelToWorld = renderable.LocalToWorldMatrix; if (renderable.Mesh != null && renderable.Material != null) { Render(ref vars, renderable.Mesh, renderable.UVs, renderable.Material); } } } private void Render(ref ShaderVariables shader, IEnumerable<Triangle> tris, IUvMap? uvs, Material material) { var backwards = this.Backward; foreach (var tri in tris) { var worldTri = tri.Transform(shader.ModelToWorld); // Convert to world space shader.WorldNormal = worldTri.Normal; // Backface culling if (!material.TwoSided) { var normal = worldTri.Normal; if (Vec3.Dot(backwards, normal) < -0.1) { continue; } } // Get triangles var v1 = WorldToScreenPoint(worldTri.Item1); var v2 = WorldToScreenPoint(worldTri.Item2); var v3 = WorldToScreenPoint(worldTri.Item3); // Get the UV coordinates Vec2 uv1 = (uvs != null) ? uvs[tri.Item1] : Vec2.Zero; Vec2 uv2 = (uvs != null) ? uvs[tri.Item2] : Vec2.Zero; Vec2 uv3 = (uvs != null) ? uvs[tri.Item3] : Vec2.Zero; Rasterize(ref shader, worldTri, v1, v2, v3, uv1, uv2, uv3, material); } } private void Rasterize(ref ShaderVariables shader, Triangle worldTri, Vec3 v1, Vec3 v2, Vec3 v3, Vec2 uv1, Vec2 uv2, Vec2 uv3, Material material) { // Sort vertices into ascending order of y var worldV1 = worldTri.Item1; var worldV2 = worldTri.Item2; var worldV3 = worldTri.Item3; if (v1.Y > v2.Y) { (v1, v2) = (v2, v1); (uv1, uv2) = (uv2, uv1); (worldV1, worldV2) = (worldV2, worldV1); } if (v2.Y > v3.Y) { (v2, v3) = (v3, v2); (uv2, uv3) = (uv3, uv2); (worldV2, worldV3) = (worldV3, worldV2); } if (v1.Y > v2.Y) { (v1, v2) = (v2, v1); (uv1, uv2) = (uv2, uv1); (worldV1, worldV2) = (worldV2, worldV1); } // Rasterize if (v2.Y == v3.Y) { // Flat Bottom Triangle DrawFlatBottomTriangle (worldV1, worldV2, worldV3, v1, v2, v3, uv1, uv2, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } else if (v1.Y == v2.Y) { // Flat Top Triangle DrawFlatTopTriangle (worldV1, worldV2, worldV3, v1, v2, v3, uv1, uv2, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } else { // General Triangle double t = (v2.Y - v3.Y)/(v1.Y - v3.Y); Vec3 d = new Vec3( (v1.X) + ((v2.Y - v1.Y) / (v3.Y - v1.Y)) * (v3.X - v1.X), v2.Y, Lerp(v3.Z, v1.Z, t) ); Vec3 worldD = Vec3.Lerp(worldV3, worldV1, t); Vec2 uvd = new Vec2( Lerp(uv3.X, uv1.X, t), Lerp(uv3.Y, uv1.Y, t) ); DrawFlatBottomTriangle (worldV1, worldV2, worldD, v1, v2, d, uv1, uv2, uvd, material, ref shader); DrawFlatTopTriangle (worldV2, worldD, worldV3, v2, d, v3, uv2, uvd, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } } private static double Lerp(double a, double b, double t) { return (1 - t) * a + t * b; } private static Color Blend(Color backColor, Color color, double amount) { byte r = (byte) ((color.R * amount) + backColor.R * (1 - amount)); byte g = (byte) ((color.G * amount) + backColor.G * (1 - amount)); byte b = (byte) ((color.B * amount) + backColor.B * (1 - amount)); return Color.FromArgb(r, g, b); } private void SetPixel(Vec3 pixel, Color c) { var x = (int)pixel.X; var y = (int)pixel.Y; var depth = pixel.Z; if (x >= 0 && y >= 0 && x < Size.Width && y < Size.Height) { if (depth >= nearClipDistance && depth < DepthBuffer[y,x]) { var opacity = c.A / 255.0; // If fully opaque, set the depth buffer DepthBuffer[y,x] = Lerp(DepthBuffer[y,x], depth, opacity); PixelBuffer[y,x] = Blend(PixelBuffer[y,x], c, opacity); } } } private void DrawVertex(Vec3 world, Vec3 screen, Vec2 uv, Material material, ref ShaderVariables vars) { vars.WorldPosition = world; vars.ScreenPixel = screen; vars.UVCoordinates = uv; var colour = material.Vert(vars); SetPixel(screen, colour); } private void DrawLine(Vec3 worldV1, Vec3 worldV2, Vec3 v1, Vec3 v2, Vec2 uv1, Vec2 uv2, Material material, ref ShaderVariables shader, bool surface) { double dist2d = Math.Sqrt((v2.X - v1.X)*(v2.X - v1.X) + (v2.Y - v1.Y)*(v2.Y - v1.Y)); if (dist2d != 0) { double invdist = 1/ dist2d; for (double i = 0; i < 1; i += invdist) { Vec3 world = Vec3.Lerp(worldV1, worldV2, i); Vec3 pixel = Vec3.Lerp(v1, v2, i); Vec2 uv = Vec2.Lerp(uv1, uv2, i); shader.WorldPosition = world; shader.ScreenPixel = pixel; shader.UVCoordinates = uv; var colour = surface ? material.Fragment(shader) : material.Edge(shader); SetPixel(pixel, colour); } } } private void DrawFlatBottomTriangle(Vec3 worldV1, Vec3 worldV2, Vec3 worldV3, Vec3 a, Vec3 b, Vec3 c, Vec2 uva, Vec2 uvb, Vec2 uvc, Material img, ref ShaderVariables shader){ double invslope1 = (b.X - a.X)/(b.Y - a.Y); double invslope2 = (c.X - a.X)/(c.Y - a.Y); double leftX = Math.Floor(a.X); double rightX = Math.Floor(a.X); int startH = (int)Math.Floor(a.Y); int endH = (int)Math.Floor(b.Y); for(int scan = startH; scan < endH; scan++){ //Texturing only double t = (scan - startH)/(endH - startH); Vec2 left = Vec2.Lerp(uva, uvb, t); Vec2 right = Vec2.Lerp(uva, uvc, t); Vec3 worldLeft = Vec3.Lerp(worldV1, worldV2, t); Vec3 worldRight = Vec3.Lerp(worldV1, worldV3, t); double zL = Lerp(a.Z, b.Z, t); double zR = Lerp(a.Z, c.Z, t); DrawLine(worldLeft, worldRight, new Vec3(leftX,scan,zL),new Vec3(rightX,scan,zR),left,right,img, ref shader, surface: true); leftX += invslope1; rightX += invslope2; } } private void DrawFlatTopTriangle (Vec3 worldV1, Vec3 worldV2, Vec3 worldV3, Vec3 a, Vec3 b, Vec3 c, Vec2 uva, Vec2 uvb, Vec2 uvc, Material img, ref ShaderVariables shader){ double invslope1 = (c.X - a.X) / (c.Y - a.Y); double invslope2 = (c.X - b.X) / (c.Y - b.Y); double leftX = Math.Floor(c.X); double rightX = Math.Floor(c.X); int startH = (int)Math.Floor(c.Y); int endH = (int)Math.Floor(a.Y); for(int scan = startH; scan > endH; scan--){ double t = (scan - startH)/(endH - startH); Vec2 left = Vec2.Lerp(uvc, uva, t); Vec2 right = Vec2.Lerp(uvc, uvb, t); Vec3 worldLeft = Vec3.Lerp(worldV3, worldV1, t); Vec3 worldRight = Vec3.Lerp(worldV3, worldV2, t); double zL = Lerp(c.Z, a.Z, t); double zR = Lerp(c.Z, b.Z, t); DrawLine(worldLeft, worldRight, new Vec3(leftX,scan, zL),new Vec3(rightX,scan, zR),left,right,img, ref shader, surface: true); leftX -= invslope1; rightX -= invslope2; } } } }","title":"File BaseCamera.cs"},{"location":"doxygen/_base_camera_8cs_source/#file-basecameracs","text":"File List > Render > src > BaseCamera.cs Go to the documentation of this file. using System; using System.Linq; using System.Drawing; using Qkmaxware.Geometry; using System.Collections.Generic; namespace Qkmaxware.Rendering { public abstract class BaseCamera : SceneNode { public Size Size {get; private set;} public Color[,] PixelBuffer {get; private set;} public double[,] DepthBuffer {get; private set;} public Skybox Skybox {get; private set;} = new Skybox(); protected readonly double focallength = 1; protected double nearClipDistance = 0.1; protected double farClipDistance = 1000; public BaseCamera(Size size) { this.Size = size; this.PixelBuffer = new Color[size.Height,size.Width]; this.DepthBuffer = new double[size.Height,size.Width]; Dirty(); } public void SetClippingDistance(double near, double far) { this.nearClipDistance = Math.Min(near, far); this.farClipDistance = Math.Max(near, far); Dirty(); } protected abstract void Dirty(); public abstract Vec3 WorldToScreenPoint(Vec3 world); public abstract Vec3 ScreenToWorldPoint(Vec2 screen); private void ClearPixels() { for (int i = 0; i < PixelBuffer.GetLength(0); i++) for (int j = 0; j < PixelBuffer.GetLength(1); j++) PixelBuffer[i, j] = Skybox.GetPixel(this, j, i); } private void ClearDepth() { for (int i = 0; i < DepthBuffer.GetLength(0); i++) for (int j = 0; j < DepthBuffer.GetLength(1); j++) DepthBuffer[i, j] = farClipDistance; } public void Render(Scene scene) { // Clean data ClearPixels(); ClearDepth(); // Set constant shader properties var vars = new ShaderVariables(); vars.WorldCameraPosition = this.Position; vars.LightSources = scene.OfType<LightSource>().ToList().AsReadOnly(); // Loop over all models foreach (var renderable in scene.OfType<Renderable>()) { vars.ModelToWorld = renderable.LocalToWorldMatrix; if (renderable.Mesh != null && renderable.Material != null) { Render(ref vars, renderable.Mesh, renderable.UVs, renderable.Material); } } } private void Render(ref ShaderVariables shader, IEnumerable<Triangle> tris, IUvMap? uvs, Material material) { var backwards = this.Backward; foreach (var tri in tris) { var worldTri = tri.Transform(shader.ModelToWorld); // Convert to world space shader.WorldNormal = worldTri.Normal; // Backface culling if (!material.TwoSided) { var normal = worldTri.Normal; if (Vec3.Dot(backwards, normal) < -0.1) { continue; } } // Get triangles var v1 = WorldToScreenPoint(worldTri.Item1); var v2 = WorldToScreenPoint(worldTri.Item2); var v3 = WorldToScreenPoint(worldTri.Item3); // Get the UV coordinates Vec2 uv1 = (uvs != null) ? uvs[tri.Item1] : Vec2.Zero; Vec2 uv2 = (uvs != null) ? uvs[tri.Item2] : Vec2.Zero; Vec2 uv3 = (uvs != null) ? uvs[tri.Item3] : Vec2.Zero; Rasterize(ref shader, worldTri, v1, v2, v3, uv1, uv2, uv3, material); } } private void Rasterize(ref ShaderVariables shader, Triangle worldTri, Vec3 v1, Vec3 v2, Vec3 v3, Vec2 uv1, Vec2 uv2, Vec2 uv3, Material material) { // Sort vertices into ascending order of y var worldV1 = worldTri.Item1; var worldV2 = worldTri.Item2; var worldV3 = worldTri.Item3; if (v1.Y > v2.Y) { (v1, v2) = (v2, v1); (uv1, uv2) = (uv2, uv1); (worldV1, worldV2) = (worldV2, worldV1); } if (v2.Y > v3.Y) { (v2, v3) = (v3, v2); (uv2, uv3) = (uv3, uv2); (worldV2, worldV3) = (worldV3, worldV2); } if (v1.Y > v2.Y) { (v1, v2) = (v2, v1); (uv1, uv2) = (uv2, uv1); (worldV1, worldV2) = (worldV2, worldV1); } // Rasterize if (v2.Y == v3.Y) { // Flat Bottom Triangle DrawFlatBottomTriangle (worldV1, worldV2, worldV3, v1, v2, v3, uv1, uv2, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } else if (v1.Y == v2.Y) { // Flat Top Triangle DrawFlatTopTriangle (worldV1, worldV2, worldV3, v1, v2, v3, uv1, uv2, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } else { // General Triangle double t = (v2.Y - v3.Y)/(v1.Y - v3.Y); Vec3 d = new Vec3( (v1.X) + ((v2.Y - v1.Y) / (v3.Y - v1.Y)) * (v3.X - v1.X), v2.Y, Lerp(v3.Z, v1.Z, t) ); Vec3 worldD = Vec3.Lerp(worldV3, worldV1, t); Vec2 uvd = new Vec2( Lerp(uv3.X, uv1.X, t), Lerp(uv3.Y, uv1.Y, t) ); DrawFlatBottomTriangle (worldV1, worldV2, worldD, v1, v2, d, uv1, uv2, uvd, material, ref shader); DrawFlatTopTriangle (worldV2, worldD, worldV3, v2, d, v3, uv2, uvd, uv3, material, ref shader); DrawLine(worldV1, worldV2, v1, v2, uv1, uv2, material, ref shader, surface: false); DrawLine(worldV2, worldV3, v2, v3, uv2, uv3, material, ref shader, surface: false); DrawLine(worldV1, worldV3, v1, v3, uv1, uv3, material, ref shader, surface: false); DrawVertex(worldV1, v1, uv1, material, ref shader); DrawVertex(worldV2, v2, uv2, material, ref shader); DrawVertex(worldV3, v3, uv3, material, ref shader); } } private static double Lerp(double a, double b, double t) { return (1 - t) * a + t * b; } private static Color Blend(Color backColor, Color color, double amount) { byte r = (byte) ((color.R * amount) + backColor.R * (1 - amount)); byte g = (byte) ((color.G * amount) + backColor.G * (1 - amount)); byte b = (byte) ((color.B * amount) + backColor.B * (1 - amount)); return Color.FromArgb(r, g, b); } private void SetPixel(Vec3 pixel, Color c) { var x = (int)pixel.X; var y = (int)pixel.Y; var depth = pixel.Z; if (x >= 0 && y >= 0 && x < Size.Width && y < Size.Height) { if (depth >= nearClipDistance && depth < DepthBuffer[y,x]) { var opacity = c.A / 255.0; // If fully opaque, set the depth buffer DepthBuffer[y,x] = Lerp(DepthBuffer[y,x], depth, opacity); PixelBuffer[y,x] = Blend(PixelBuffer[y,x], c, opacity); } } } private void DrawVertex(Vec3 world, Vec3 screen, Vec2 uv, Material material, ref ShaderVariables vars) { vars.WorldPosition = world; vars.ScreenPixel = screen; vars.UVCoordinates = uv; var colour = material.Vert(vars); SetPixel(screen, colour); } private void DrawLine(Vec3 worldV1, Vec3 worldV2, Vec3 v1, Vec3 v2, Vec2 uv1, Vec2 uv2, Material material, ref ShaderVariables shader, bool surface) { double dist2d = Math.Sqrt((v2.X - v1.X)*(v2.X - v1.X) + (v2.Y - v1.Y)*(v2.Y - v1.Y)); if (dist2d != 0) { double invdist = 1/ dist2d; for (double i = 0; i < 1; i += invdist) { Vec3 world = Vec3.Lerp(worldV1, worldV2, i); Vec3 pixel = Vec3.Lerp(v1, v2, i); Vec2 uv = Vec2.Lerp(uv1, uv2, i); shader.WorldPosition = world; shader.ScreenPixel = pixel; shader.UVCoordinates = uv; var colour = surface ? material.Fragment(shader) : material.Edge(shader); SetPixel(pixel, colour); } } } private void DrawFlatBottomTriangle(Vec3 worldV1, Vec3 worldV2, Vec3 worldV3, Vec3 a, Vec3 b, Vec3 c, Vec2 uva, Vec2 uvb, Vec2 uvc, Material img, ref ShaderVariables shader){ double invslope1 = (b.X - a.X)/(b.Y - a.Y); double invslope2 = (c.X - a.X)/(c.Y - a.Y); double leftX = Math.Floor(a.X); double rightX = Math.Floor(a.X); int startH = (int)Math.Floor(a.Y); int endH = (int)Math.Floor(b.Y); for(int scan = startH; scan < endH; scan++){ //Texturing only double t = (scan - startH)/(endH - startH); Vec2 left = Vec2.Lerp(uva, uvb, t); Vec2 right = Vec2.Lerp(uva, uvc, t); Vec3 worldLeft = Vec3.Lerp(worldV1, worldV2, t); Vec3 worldRight = Vec3.Lerp(worldV1, worldV3, t); double zL = Lerp(a.Z, b.Z, t); double zR = Lerp(a.Z, c.Z, t); DrawLine(worldLeft, worldRight, new Vec3(leftX,scan,zL),new Vec3(rightX,scan,zR),left,right,img, ref shader, surface: true); leftX += invslope1; rightX += invslope2; } } private void DrawFlatTopTriangle (Vec3 worldV1, Vec3 worldV2, Vec3 worldV3, Vec3 a, Vec3 b, Vec3 c, Vec2 uva, Vec2 uvb, Vec2 uvc, Material img, ref ShaderVariables shader){ double invslope1 = (c.X - a.X) / (c.Y - a.Y); double invslope2 = (c.X - b.X) / (c.Y - b.Y); double leftX = Math.Floor(c.X); double rightX = Math.Floor(c.X); int startH = (int)Math.Floor(c.Y); int endH = (int)Math.Floor(a.Y); for(int scan = startH; scan > endH; scan--){ double t = (scan - startH)/(endH - startH); Vec2 left = Vec2.Lerp(uvc, uva, t); Vec2 right = Vec2.Lerp(uvc, uvb, t); Vec3 worldLeft = Vec3.Lerp(worldV3, worldV1, t); Vec3 worldRight = Vec3.Lerp(worldV3, worldV2, t); double zL = Lerp(c.Z, a.Z, t); double zR = Lerp(c.Z, b.Z, t); DrawLine(worldLeft, worldRight, new Vec3(leftX,scan, zL),new Vec3(rightX,scan, zR),left,right,img, ref shader, surface: true); leftX -= invslope1; rightX -= invslope2; } } } }","title":"File BaseCamera.cs"},{"location":"doxygen/_light_source_8cs/","text":"File LightSource.cs File List > Render > src > LightSource.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class AmbientLight Soft light applied from all angles class LightSource Base class for light sources class PointLight Light applied from a point in space The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"File LightSource.cs"},{"location":"doxygen/_light_source_8cs/#file-lightsourcecs","text":"File List > Render > src > LightSource.cs Go to the source code of this file.","title":"File LightSource.cs"},{"location":"doxygen/_light_source_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_light_source_8cs/#classes","text":"Type Name class AmbientLight Soft light applied from all angles class LightSource Base class for light sources class PointLight Light applied from a point in space The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"Classes"},{"location":"doxygen/_light_source_8cs_source/","text":"File LightSource.cs File List > Render > src > LightSource.cs Go to the documentation of this file. using System; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public abstract class LightSource : SceneNode { public Color Tint {get; set;} = Color.White; public abstract double Intensity(Vec3 position, Vec3 normal); public abstract Vec3 Direction (Vec3 position, Vec3 normal); } public class AmbientLight : LightSource { public double SourceIntensity {get; set;} = 0.1; public override double Intensity(Vec3 position, Vec3 normal) { return SourceIntensity; } public override Vec3 Direction (Vec3 position, Vec3 normal) { return -normal; } } public class PointLight : LightSource { public double SourceIntensity {get; set;} = 1; public override double Intensity(Vec3 position, Vec3 normal) { var distance = Vec3.Distance(this.Position, position); var intensity = (1 / (distance * distance)); return SourceIntensity * Math.Max(intensity, 0); } public override Vec3 Direction (Vec3 position, Vec3 normal) { return (position - this.Position).Normalized; } } }","title":"File LightSource.cs"},{"location":"doxygen/_light_source_8cs_source/#file-lightsourcecs","text":"File List > Render > src > LightSource.cs Go to the documentation of this file. using System; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public abstract class LightSource : SceneNode { public Color Tint {get; set;} = Color.White; public abstract double Intensity(Vec3 position, Vec3 normal); public abstract Vec3 Direction (Vec3 position, Vec3 normal); } public class AmbientLight : LightSource { public double SourceIntensity {get; set;} = 0.1; public override double Intensity(Vec3 position, Vec3 normal) { return SourceIntensity; } public override Vec3 Direction (Vec3 position, Vec3 normal) { return -normal; } } public class PointLight : LightSource { public double SourceIntensity {get; set;} = 1; public override double Intensity(Vec3 position, Vec3 normal) { var distance = Vec3.Distance(this.Position, position); var intensity = (1 / (distance * distance)); return SourceIntensity * Math.Max(intensity, 0); } public override Vec3 Direction (Vec3 position, Vec3 normal) { return (position - this.Position).Normalized; } } }","title":"File LightSource.cs"},{"location":"doxygen/_material_8cs/","text":"File Material.cs File List > Render > src > Material.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class Material Base class for all material rendering class TexturedMaterial Base class for a material with a single texture class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects The documentation for this class was generated from the following file Render/src/Material.cs","title":"File Material.cs"},{"location":"doxygen/_material_8cs/#file-materialcs","text":"File List > Render > src > Material.cs Go to the source code of this file.","title":"File Material.cs"},{"location":"doxygen/_material_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_material_8cs/#classes","text":"Type Name class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class Material Base class for all material rendering class TexturedMaterial Base class for a material with a single texture class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects The documentation for this class was generated from the following file Render/src/Material.cs","title":"Classes"},{"location":"doxygen/_material_8cs_source/","text":"File Material.cs File List > Render > src > Material.cs Go to the documentation of this file. using System; using System.Drawing; using System.Linq; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Material { public bool TwoSided = false; public virtual Color Vert(ShaderVariables variables) { return Color.Transparent; } public virtual Color Edge(ShaderVariables variables) { return Fragment(variables); } public virtual Color Fragment(ShaderVariables variables) { return Color.Transparent; } } public class Wireframe : Material { public Color Colour = Color.White; public Wireframe(Color colour) { this.Colour = colour; this.TwoSided = true; } public override Color Edge(ShaderVariables variables) { return this.Colour; } } public class UnlitColour : Material { public Color Colour = Color.White; public UnlitColour(Color colour) { this.Colour = colour; } public override Color Edge(ShaderVariables variables) { return Colour; } public override Color Fragment(ShaderVariables variables) { return Colour; } } public enum TextureWrapMode { Clamp, Repeat, } public class TexturedMaterial : Material { public Color[,] Texture; public TextureWrapMode WrapMode = TextureWrapMode.Clamp; protected int TextureHeight => Texture.GetLength(0); protected int TextureWidth => Texture.GetLength(1); public TexturedMaterial(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) { this.Texture = texture; this.WrapMode = wrap; } private int Wrap(int x, int x_min, int x_max) { return (((x - x_min) % (x_max - x_min)) + (x_max - x_min)) % (x_max - x_min) + x_min; } private int Clamp(int x, int x_min, int x_max) { return x < x_min ? x_min : (x > x_max ? x_max : x); } protected Color ColourSample(Vec2 uv) { var uvx = (int)(uv.X * TextureWidth); var uvy = (int)(uv.Y * TextureHeight); switch (WrapMode) { case TextureWrapMode.Repeat: uvx = Wrap(uvx, 0, TextureWidth - 1); uvy = Wrap(uvy, 0, TextureHeight - 1); break; case TextureWrapMode.Clamp: default: uvx = Clamp(uvx, 0, TextureWidth - 1); uvy = Clamp(uvy, 0, TextureHeight - 1); break; } return Texture[uvy, uvx]; } } public class UnlitTexture : TexturedMaterial { public UnlitTexture(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) : base(texture, wrap) {} public override Color Edge(ShaderVariables variables) { return Fragment(variables); } public override Color Fragment(ShaderVariables variables) { return ColourSample(variables.UVCoordinates); } } public class DiffuseColour : Material { public Color Colour = Color.White; public double Albedo = 1; public DiffuseColour(Color colour) { this.Colour = colour; } private Color Darken(Color colour, double shade) { double r = shade * colour.R; double g = shade * colour.G; double b = shade * colour.B; return Color.FromArgb(colour.A, (int)r % 255, (int)g % 255, (int)b % 255); } private Color Mix(Color a, Color b) { return Color.FromArgb( a.A, (a.R * b.R)/255, (a.G * b.G)/255, (a.B * b.B)/255 ); } public override Color Fragment(ShaderVariables variables) { var surfColour = Colour; Vec3 N = variables.WorldNormal; var tint = variables.LightSources.Select((light) => { var lightColour = light.Tint; Vec3 L = light.Direction(variables.WorldPosition, variables.WorldNormal); double Lintensity = light.Intensity(variables.WorldPosition, variables.WorldNormal); double diffuse_surface_shade = (Albedo / Math.PI) * Lintensity * Math.Max(Vec3.Dot(L, N), 0); return Darken(lightColour, diffuse_surface_shade); }).Aggregate((a,b) => Mix(a, b)); return Mix(surfColour, tint); } } public class DiffuseTexture : TexturedMaterial { public Color Colour = Color.White; public double Albedo = 1; public DiffuseTexture(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) : base(texture, wrap) {} private Color Darken(Color colour, double shade) { double r = shade * colour.R; double g = shade * colour.G; double b = shade * colour.B; return Color.FromArgb(colour.A, (int)r % 255, (int)g % 255, (int)b % 255); } private Color Mix(Color a, Color b) { return Color.FromArgb( a.A, (a.R * b.R)/255, (a.G * b.G)/255, (a.B * b.B)/255 ); } public override Color Fragment(ShaderVariables variables) { var surfColour = ColourSample(variables.UVCoordinates); Vec3 N = variables.WorldNormal; var tint = variables.LightSources.Select((light) => { var lightColour = light.Tint; Vec3 L = light.Direction(variables.WorldPosition, variables.WorldNormal); double Lintensity = light.Intensity(variables.WorldPosition, variables.WorldNormal); double diffuse_surface_shade = (Albedo / Math.PI) * Lintensity * Math.Max(Vec3.Dot(L, N), 0); return Darken(lightColour, diffuse_surface_shade); }).Aggregate((a,b) => Mix(a, b)); return Mix(surfColour, tint); } } }","title":"File Material.cs"},{"location":"doxygen/_material_8cs_source/#file-materialcs","text":"File List > Render > src > Material.cs Go to the documentation of this file. using System; using System.Drawing; using System.Linq; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Material { public bool TwoSided = false; public virtual Color Vert(ShaderVariables variables) { return Color.Transparent; } public virtual Color Edge(ShaderVariables variables) { return Fragment(variables); } public virtual Color Fragment(ShaderVariables variables) { return Color.Transparent; } } public class Wireframe : Material { public Color Colour = Color.White; public Wireframe(Color colour) { this.Colour = colour; this.TwoSided = true; } public override Color Edge(ShaderVariables variables) { return this.Colour; } } public class UnlitColour : Material { public Color Colour = Color.White; public UnlitColour(Color colour) { this.Colour = colour; } public override Color Edge(ShaderVariables variables) { return Colour; } public override Color Fragment(ShaderVariables variables) { return Colour; } } public enum TextureWrapMode { Clamp, Repeat, } public class TexturedMaterial : Material { public Color[,] Texture; public TextureWrapMode WrapMode = TextureWrapMode.Clamp; protected int TextureHeight => Texture.GetLength(0); protected int TextureWidth => Texture.GetLength(1); public TexturedMaterial(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) { this.Texture = texture; this.WrapMode = wrap; } private int Wrap(int x, int x_min, int x_max) { return (((x - x_min) % (x_max - x_min)) + (x_max - x_min)) % (x_max - x_min) + x_min; } private int Clamp(int x, int x_min, int x_max) { return x < x_min ? x_min : (x > x_max ? x_max : x); } protected Color ColourSample(Vec2 uv) { var uvx = (int)(uv.X * TextureWidth); var uvy = (int)(uv.Y * TextureHeight); switch (WrapMode) { case TextureWrapMode.Repeat: uvx = Wrap(uvx, 0, TextureWidth - 1); uvy = Wrap(uvy, 0, TextureHeight - 1); break; case TextureWrapMode.Clamp: default: uvx = Clamp(uvx, 0, TextureWidth - 1); uvy = Clamp(uvy, 0, TextureHeight - 1); break; } return Texture[uvy, uvx]; } } public class UnlitTexture : TexturedMaterial { public UnlitTexture(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) : base(texture, wrap) {} public override Color Edge(ShaderVariables variables) { return Fragment(variables); } public override Color Fragment(ShaderVariables variables) { return ColourSample(variables.UVCoordinates); } } public class DiffuseColour : Material { public Color Colour = Color.White; public double Albedo = 1; public DiffuseColour(Color colour) { this.Colour = colour; } private Color Darken(Color colour, double shade) { double r = shade * colour.R; double g = shade * colour.G; double b = shade * colour.B; return Color.FromArgb(colour.A, (int)r % 255, (int)g % 255, (int)b % 255); } private Color Mix(Color a, Color b) { return Color.FromArgb( a.A, (a.R * b.R)/255, (a.G * b.G)/255, (a.B * b.B)/255 ); } public override Color Fragment(ShaderVariables variables) { var surfColour = Colour; Vec3 N = variables.WorldNormal; var tint = variables.LightSources.Select((light) => { var lightColour = light.Tint; Vec3 L = light.Direction(variables.WorldPosition, variables.WorldNormal); double Lintensity = light.Intensity(variables.WorldPosition, variables.WorldNormal); double diffuse_surface_shade = (Albedo / Math.PI) * Lintensity * Math.Max(Vec3.Dot(L, N), 0); return Darken(lightColour, diffuse_surface_shade); }).Aggregate((a,b) => Mix(a, b)); return Mix(surfColour, tint); } } public class DiffuseTexture : TexturedMaterial { public Color Colour = Color.White; public double Albedo = 1; public DiffuseTexture(Color[,] texture, TextureWrapMode wrap = TextureWrapMode.Clamp) : base(texture, wrap) {} private Color Darken(Color colour, double shade) { double r = shade * colour.R; double g = shade * colour.G; double b = shade * colour.B; return Color.FromArgb(colour.A, (int)r % 255, (int)g % 255, (int)b % 255); } private Color Mix(Color a, Color b) { return Color.FromArgb( a.A, (a.R * b.R)/255, (a.G * b.G)/255, (a.B * b.B)/255 ); } public override Color Fragment(ShaderVariables variables) { var surfColour = ColourSample(variables.UVCoordinates); Vec3 N = variables.WorldNormal; var tint = variables.LightSources.Select((light) => { var lightColour = light.Tint; Vec3 L = light.Direction(variables.WorldPosition, variables.WorldNormal); double Lintensity = light.Intensity(variables.WorldPosition, variables.WorldNormal); double diffuse_surface_shade = (Albedo / Math.PI) * Lintensity * Math.Max(Vec3.Dot(L, N), 0); return Darken(lightColour, diffuse_surface_shade); }).Aggregate((a,b) => Mix(a, b)); return Mix(surfColour, tint); } } }","title":"File Material.cs"},{"location":"doxygen/_perspective_camera_8cs/","text":"File PerspectiveCamera.cs File List > Render > src > PerspectiveCamera.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class PerspectiveCamera Camera for perspective rendering The documentation for this class was generated from the following file Render/src/PerspectiveCamera.cs","title":"File PerspectiveCamera.cs"},{"location":"doxygen/_perspective_camera_8cs/#file-perspectivecameracs","text":"File List > Render > src > PerspectiveCamera.cs Go to the source code of this file.","title":"File PerspectiveCamera.cs"},{"location":"doxygen/_perspective_camera_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_perspective_camera_8cs/#classes","text":"Type Name class PerspectiveCamera Camera for perspective rendering The documentation for this class was generated from the following file Render/src/PerspectiveCamera.cs","title":"Classes"},{"location":"doxygen/_perspective_camera_8cs_source/","text":"File PerspectiveCamera.cs File List > Render > src > PerspectiveCamera.cs Go to the documentation of this file. using System; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class PerspectiveCamera : BaseCamera { public PerspectiveCamera(Size size) : base(size) {} protected override void Dirty() {} public override Vec3 ScreenToWorldPoint(Vec2 screen) { Vec3 local = new Vec3( screen.X - this.Size.Width/2.0, focallength, screen.Y - this.Size.Height/2.0 ); Vec3 world = this.LocalToWorldMatrix * local; return world; } public override Vec3 WorldToScreenPoint(Vec3 world) { // Step 1, convert world space vector to local camera space vector var local = this.WorldToLocalMatrix * world; // Step 2, convert to screen space vector var screen = ToScreenSpace(local); var pixel = new Vec3( (screen.X * this.Size.Width + this.Size.Width/2.0) , (screen.Y * this.Size.Height + this.Size.Height/2.0) , screen.Z ); //Console.WriteLine($\"{local} -> {pixel}\"); return pixel; } private Vec3 ToScreenSpace(Vec3 local) { var distance = local.Length; var zAngle = Math.Atan2(local.X, local.Y); var xAngle = Math.Atan2(local.Z, local.Y); var screenX = Math.Tan(zAngle) * focallength; var screenY = Math.Tan(xAngle) * focallength; return new Vec3( screenX, screenY, Math.Sign(local.Y) * distance // in front of or behind ); } } }","title":"File PerspectiveCamera.cs"},{"location":"doxygen/_perspective_camera_8cs_source/#file-perspectivecameracs","text":"File List > Render > src > PerspectiveCamera.cs Go to the documentation of this file. using System; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class PerspectiveCamera : BaseCamera { public PerspectiveCamera(Size size) : base(size) {} protected override void Dirty() {} public override Vec3 ScreenToWorldPoint(Vec2 screen) { Vec3 local = new Vec3( screen.X - this.Size.Width/2.0, focallength, screen.Y - this.Size.Height/2.0 ); Vec3 world = this.LocalToWorldMatrix * local; return world; } public override Vec3 WorldToScreenPoint(Vec3 world) { // Step 1, convert world space vector to local camera space vector var local = this.WorldToLocalMatrix * world; // Step 2, convert to screen space vector var screen = ToScreenSpace(local); var pixel = new Vec3( (screen.X * this.Size.Width + this.Size.Width/2.0) , (screen.Y * this.Size.Height + this.Size.Height/2.0) , screen.Z ); //Console.WriteLine($\"{local} -> {pixel}\"); return pixel; } private Vec3 ToScreenSpace(Vec3 local) { var distance = local.Length; var zAngle = Math.Atan2(local.X, local.Y); var xAngle = Math.Atan2(local.Z, local.Y); var screenX = Math.Tan(zAngle) * focallength; var screenY = Math.Tan(xAngle) * focallength; return new Vec3( screenX, screenY, Math.Sign(local.Y) * distance // in front of or behind ); } } }","title":"File PerspectiveCamera.cs"},{"location":"doxygen/_renderable_8cs/","text":"File Renderable.cs File List > Render > src > Renderable.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class Renderable Object that can be rendered by the camera The documentation for this class was generated from the following file Render/src/Renderable.cs","title":"File Renderable.cs"},{"location":"doxygen/_renderable_8cs/#file-renderablecs","text":"File List > Render > src > Renderable.cs Go to the source code of this file.","title":"File Renderable.cs"},{"location":"doxygen/_renderable_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_renderable_8cs/#classes","text":"Type Name class Renderable Object that can be rendered by the camera The documentation for this class was generated from the following file Render/src/Renderable.cs","title":"Classes"},{"location":"doxygen/_renderable_8cs_source/","text":"File Renderable.cs File List > Render > src > Renderable.cs Go to the documentation of this file. using System.Collections.Generic; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Renderable : SceneNode { public IEnumerable<Triangle>? Mesh; public IUvMap? UVs; public Material Material = new UnlitColour(Color.White); public Renderable() {} public Renderable(IEnumerable<Triangle> mesh) { this.Mesh = mesh; } public Renderable(IEnumerable<Triangle> mesh, Material material, IUvMap? uv = null) { this.Mesh = mesh; this.UVs = uv; this.Material = material; } } }","title":"File Renderable.cs"},{"location":"doxygen/_renderable_8cs_source/#file-renderablecs","text":"File List > Render > src > Renderable.cs Go to the documentation of this file. using System.Collections.Generic; using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Renderable : SceneNode { public IEnumerable<Triangle>? Mesh; public IUvMap? UVs; public Material Material = new UnlitColour(Color.White); public Renderable() {} public Renderable(IEnumerable<Triangle> mesh) { this.Mesh = mesh; } public Renderable(IEnumerable<Triangle> mesh, Material material, IUvMap? uv = null) { this.Mesh = mesh; this.UVs = uv; this.Material = material; } } }","title":"File Renderable.cs"},{"location":"doxygen/_resolutions_8cs/","text":"File Resolutions.cs File List > Render > src > Resolutions.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class Resolutions Common resolution sizes class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"File Resolutions.cs"},{"location":"doxygen/_resolutions_8cs/#file-resolutionscs","text":"File List > Render > src > Resolutions.cs Go to the source code of this file.","title":"File Resolutions.cs"},{"location":"doxygen/_resolutions_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_resolutions_8cs/#classes","text":"Type Name class Resolutions Common resolution sizes class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Classes"},{"location":"doxygen/_resolutions_8cs_source/","text":"File Resolutions.cs File List > Render > src > Resolutions.cs Go to the documentation of this file. using System.Drawing; namespace Qkmaxware.Rendering { public static class Resolutions { public static class Icon { public static readonly Size Web = new Size(16, 16); public static readonly Size Taskbar = new Size(32, 32); public static readonly Size Desktop = new Size(96, 96); } public static class Instagram { public static readonly Size ProfilePhoto = new Size(110, 110); } public static class Facebook { public static readonly Size ProfilePhoto = new Size(160, 160); public static readonly Size CoverPhoto = new Size(1640, 624); } public static class YouTube { public static readonly Size ProfilePhoto = new Size(800, 800); public static readonly Size ThumbnailPhoto = new Size(1280, 720); public static readonly Size CoverPhoto = new Size(2560, 1440); } public static class Twitter { public static readonly Size ProfilePhoto = new Size(400, 400); public static readonly Size CoverPhoto = new Size(1500, 1500); } public static class LinkedIn { public static readonly Size ProfilePhoto = new Size(400, 400); public static readonly Size CoverPhoto = new Size(646, 220); } public static class Pinterest { public static readonly Size ProfilePhoto = new Size(165, 165); } public static class Aspect4x3 { public static readonly Size Display480p = new Size(640,480); public static readonly Size Display600p = new Size(800,600); public static readonly Size Display720p = new Size(960,720); public static readonly Size Display768p = new Size(1024,768); public static readonly Size Display960p = new Size(1280,960); public static readonly Size Display1050p = new Size(1400,1050); public static readonly Size Display1080p = new Size(1440,1080); public static readonly Size Display1200p = new Size(1600,1200); public static readonly Size Display1392p = new Size(1856,1392); public static readonly Size Display1440p = new Size(1920,1440); public static readonly Size Display1536p = new Size(2048,1536); } public static class Aspect16x10 { public static readonly Size Display800p = new Size(1280,800); public static readonly Size Display900p = new Size(1440,900); public static readonly Size Display1050p = new Size(1680,1050); public static readonly Size Display1200p = new Size(1920,1200); public static readonly Size Display1600p = new Size(2560,1600); } public static class Aspect16x9 { public static readonly Size Display576p = new Size(1024,576); public static readonly Size Display648p = new Size(1152,648); public static readonly Size Display720p = new Size(1280,720); public static readonly Size Display768p = new Size(1366,768); public static readonly Size Display900p = new Size(1600,900); public static readonly Size Display1080p = new Size(1920,1080); public static readonly Size Display1440p = new Size(2560,1440); public static readonly Size Display2160p = new Size(3840,2160); } } }","title":"File Resolutions.cs"},{"location":"doxygen/_resolutions_8cs_source/#file-resolutionscs","text":"File List > Render > src > Resolutions.cs Go to the documentation of this file. using System.Drawing; namespace Qkmaxware.Rendering { public static class Resolutions { public static class Icon { public static readonly Size Web = new Size(16, 16); public static readonly Size Taskbar = new Size(32, 32); public static readonly Size Desktop = new Size(96, 96); } public static class Instagram { public static readonly Size ProfilePhoto = new Size(110, 110); } public static class Facebook { public static readonly Size ProfilePhoto = new Size(160, 160); public static readonly Size CoverPhoto = new Size(1640, 624); } public static class YouTube { public static readonly Size ProfilePhoto = new Size(800, 800); public static readonly Size ThumbnailPhoto = new Size(1280, 720); public static readonly Size CoverPhoto = new Size(2560, 1440); } public static class Twitter { public static readonly Size ProfilePhoto = new Size(400, 400); public static readonly Size CoverPhoto = new Size(1500, 1500); } public static class LinkedIn { public static readonly Size ProfilePhoto = new Size(400, 400); public static readonly Size CoverPhoto = new Size(646, 220); } public static class Pinterest { public static readonly Size ProfilePhoto = new Size(165, 165); } public static class Aspect4x3 { public static readonly Size Display480p = new Size(640,480); public static readonly Size Display600p = new Size(800,600); public static readonly Size Display720p = new Size(960,720); public static readonly Size Display768p = new Size(1024,768); public static readonly Size Display960p = new Size(1280,960); public static readonly Size Display1050p = new Size(1400,1050); public static readonly Size Display1080p = new Size(1440,1080); public static readonly Size Display1200p = new Size(1600,1200); public static readonly Size Display1392p = new Size(1856,1392); public static readonly Size Display1440p = new Size(1920,1440); public static readonly Size Display1536p = new Size(2048,1536); } public static class Aspect16x10 { public static readonly Size Display800p = new Size(1280,800); public static readonly Size Display900p = new Size(1440,900); public static readonly Size Display1050p = new Size(1680,1050); public static readonly Size Display1200p = new Size(1920,1200); public static readonly Size Display1600p = new Size(2560,1600); } public static class Aspect16x9 { public static readonly Size Display576p = new Size(1024,576); public static readonly Size Display648p = new Size(1152,648); public static readonly Size Display720p = new Size(1280,720); public static readonly Size Display768p = new Size(1366,768); public static readonly Size Display900p = new Size(1600,900); public static readonly Size Display1080p = new Size(1920,1080); public static readonly Size Display1440p = new Size(2560,1440); public static readonly Size Display2160p = new Size(3840,2160); } } }","title":"File Resolutions.cs"},{"location":"doxygen/_scene_8cs/","text":"File Scene.cs File List > Render > src > Scene.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class Scene Scene for object management The documentation for this class was generated from the following file Render/src/Scene.cs","title":"File Scene.cs"},{"location":"doxygen/_scene_8cs/#file-scenecs","text":"File List > Render > src > Scene.cs Go to the source code of this file.","title":"File Scene.cs"},{"location":"doxygen/_scene_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_scene_8cs/#classes","text":"Type Name class Scene Scene for object management The documentation for this class was generated from the following file Render/src/Scene.cs","title":"Classes"},{"location":"doxygen/_scene_8cs_source/","text":"File Scene.cs File List > Render > src > Scene.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Scene : IEnumerable<SceneNode> { private List<SceneNode> children = new List<SceneNode>(); public void Add(SceneNode node) { this.children.Add(node); node.root_scene = this; } public void Remove(SceneNode node) { if(this.children.Remove(node)) { node.root_scene = null; } } public IEnumerator<SceneNode> GetEnumerator() { foreach (var child in children) { yield return child; foreach (var subchild in child) { yield return subchild; } } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } }","title":"File Scene.cs"},{"location":"doxygen/_scene_8cs_source/#file-scenecs","text":"File List > Render > src > Scene.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Scene : IEnumerable<SceneNode> { private List<SceneNode> children = new List<SceneNode>(); public void Add(SceneNode node) { this.children.Add(node); node.root_scene = this; } public void Remove(SceneNode node) { if(this.children.Remove(node)) { node.root_scene = null; } } public IEnumerator<SceneNode> GetEnumerator() { foreach (var child in children) { yield return child; foreach (var subchild in child) { yield return subchild; } } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } }","title":"File Scene.cs"},{"location":"doxygen/_scene_node_8cs/","text":"File SceneNode.cs File List > Render > src > SceneNode.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class SceneNode A node which exists within the scene graph The documentation for this class was generated from the following file Render/src/SceneNode.cs","title":"File SceneNode.cs"},{"location":"doxygen/_scene_node_8cs/#file-scenenodecs","text":"File List > Render > src > SceneNode.cs Go to the source code of this file.","title":"File SceneNode.cs"},{"location":"doxygen/_scene_node_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_scene_node_8cs/#classes","text":"Type Name class SceneNode A node which exists within the scene graph The documentation for this class was generated from the following file Render/src/SceneNode.cs","title":"Classes"},{"location":"doxygen/_scene_node_8cs_source/","text":"File SceneNode.cs File List > Render > src > SceneNode.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class SceneNode : IEnumerable<SceneNode> { public Scene? Scene => (Parent != null) ? Parent.Scene : this.root_scene; // Use this to hide the property from doxygen internal Scene? root_scene = null; public SceneNode? Parent {get; private set;} = null; public Transformation Transform = Transformation.Identity(); public Vec3 Position => LocalToWorldMatrix * Vec3.Zero; public Vec3 Forward => LocalToWorldMatrix * Vec3.J; public Vec3 Backward => -Forward; public Vec3 Up => LocalToWorldMatrix * Vec3.K; public Vec3 Down => -Up; public Vec3 Left => -Right; public Vec3 Right => LocalToWorldMatrix * Vec3.I; public Transformation LocalToWorldMatrix => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform; public Transformation WorldToLocalMatrix => LocalToWorldMatrix.Inverse; private List<SceneNode> children = new List<SceneNode>(); public void Add(SceneNode node) { // Remove from old parent node.Parent?.Remove(node); // Add to new parent this.children.Add(node); node.Parent = this; } public void Remove(SceneNode node) { if (this.children.Remove(node)) { node.Parent = null; } } public void Detach() { this.Parent?.Remove(this); } public IEnumerator<SceneNode> GetEnumerator() { foreach (var child in children) { yield return child; foreach (var subchild in child) { yield return subchild; } } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public void Rotate(Vec3 axis, double angle) { var norm = axis.Normalized; double c = Math.Cos(angle); double s = Math.Sin(angle); double t = 1.0 - c; double x = norm.X; double y = norm.Y; double z = norm.Z; var rotation = new Transformation( t * x * x + c, t * x * y - z * s, t * x * z + y * s, 0, t * x * y + z * s, t * y * y + c, t * y * z - x * s, 0, t * x * z - y * s, t * y * z + x * s, t * z * z + c, 0 ); this.Transform = rotation * this.Transform; } public void RotateAround(Vec3 point, Vec3 axis, double angle) { var norm = axis.Normalized; double c = Math.Cos(angle); double s = Math.Sin(angle); double t = 1.0 - c; double x = norm.X; double y = norm.Y; double z = norm.Z; var rotation = new Transformation( t * x * x + c, t * x * y - z * s, t * x * z + y * s, 0, t * x * y + z * s, t * y * y + c, t * y * z - x * s, 0, t * x * z - y * s, t * y * z + x * s, t * z * z + c, 0 ); this.Transform = (Transformation.Offset(point) * rotation * Transformation.Offset(-point)) * this.Transform; } public void Move(Vec3 delta) { this.Transform = Transformation.Offset(delta) * this.Transform; } } }","title":"File SceneNode.cs"},{"location":"doxygen/_scene_node_8cs_source/#file-scenenodecs","text":"File List > Render > src > SceneNode.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class SceneNode : IEnumerable<SceneNode> { public Scene? Scene => (Parent != null) ? Parent.Scene : this.root_scene; // Use this to hide the property from doxygen internal Scene? root_scene = null; public SceneNode? Parent {get; private set;} = null; public Transformation Transform = Transformation.Identity(); public Vec3 Position => LocalToWorldMatrix * Vec3.Zero; public Vec3 Forward => LocalToWorldMatrix * Vec3.J; public Vec3 Backward => -Forward; public Vec3 Up => LocalToWorldMatrix * Vec3.K; public Vec3 Down => -Up; public Vec3 Left => -Right; public Vec3 Right => LocalToWorldMatrix * Vec3.I; public Transformation LocalToWorldMatrix => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform; public Transformation WorldToLocalMatrix => LocalToWorldMatrix.Inverse; private List<SceneNode> children = new List<SceneNode>(); public void Add(SceneNode node) { // Remove from old parent node.Parent?.Remove(node); // Add to new parent this.children.Add(node); node.Parent = this; } public void Remove(SceneNode node) { if (this.children.Remove(node)) { node.Parent = null; } } public void Detach() { this.Parent?.Remove(this); } public IEnumerator<SceneNode> GetEnumerator() { foreach (var child in children) { yield return child; foreach (var subchild in child) { yield return subchild; } } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public void Rotate(Vec3 axis, double angle) { var norm = axis.Normalized; double c = Math.Cos(angle); double s = Math.Sin(angle); double t = 1.0 - c; double x = norm.X; double y = norm.Y; double z = norm.Z; var rotation = new Transformation( t * x * x + c, t * x * y - z * s, t * x * z + y * s, 0, t * x * y + z * s, t * y * y + c, t * y * z - x * s, 0, t * x * z - y * s, t * y * z + x * s, t * z * z + c, 0 ); this.Transform = rotation * this.Transform; } public void RotateAround(Vec3 point, Vec3 axis, double angle) { var norm = axis.Normalized; double c = Math.Cos(angle); double s = Math.Sin(angle); double t = 1.0 - c; double x = norm.X; double y = norm.Y; double z = norm.Z; var rotation = new Transformation( t * x * x + c, t * x * y - z * s, t * x * z + y * s, 0, t * x * y + z * s, t * y * y + c, t * y * z - x * s, 0, t * x * z - y * s, t * y * z + x * s, t * z * z + c, 0 ); this.Transform = (Transformation.Offset(point) * rotation * Transformation.Offset(-point)) * this.Transform; } public void Move(Vec3 delta) { this.Transform = Transformation.Offset(delta) * this.Transform; } } }","title":"File SceneNode.cs"},{"location":"doxygen/_shader_variables_8cs/","text":"File ShaderVariables.cs File List > Render > src > ShaderVariables.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name struct ShaderVariables Variables that can be used by materials to apply shading The documentation for this class was generated from the following file Render/src/ShaderVariables.cs","title":"File ShaderVariables.cs"},{"location":"doxygen/_shader_variables_8cs/#file-shadervariablescs","text":"File List > Render > src > ShaderVariables.cs Go to the source code of this file.","title":"File ShaderVariables.cs"},{"location":"doxygen/_shader_variables_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_shader_variables_8cs/#classes","text":"Type Name struct ShaderVariables Variables that can be used by materials to apply shading The documentation for this class was generated from the following file Render/src/ShaderVariables.cs","title":"Classes"},{"location":"doxygen/_shader_variables_8cs_source/","text":"File ShaderVariables.cs File List > Render > src > ShaderVariables.cs Go to the documentation of this file. using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public struct ShaderVariables { // Transformations public Transformation ModelToWorld; // Assigned when model is chosen for rendering public Transformation WorldToModel => ModelToWorld.Inverse; public Vec3 WorldPosition; // Assigned when pixel is drawn public Vec3 WorldNormal; // Assigned when triangle is chosen for rendering // Camera & Screen public Vec3 WorldCameraPosition; // Assigned when camera is selected for rendering public Vec3 ScreenPixel; // Assigned when coordinate is projected to the screen // Texturing public Vec2 UVCoordinates; // Assigned when coordinate is projected to the screen // Lighting public IEnumerable<LightSource> LightSources; // Assigned when camera is selected for rendering } }","title":"File ShaderVariables.cs"},{"location":"doxygen/_shader_variables_8cs_source/#file-shadervariablescs","text":"File List > Render > src > ShaderVariables.cs Go to the documentation of this file. using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public struct ShaderVariables { // Transformations public Transformation ModelToWorld; // Assigned when model is chosen for rendering public Transformation WorldToModel => ModelToWorld.Inverse; public Vec3 WorldPosition; // Assigned when pixel is drawn public Vec3 WorldNormal; // Assigned when triangle is chosen for rendering // Camera & Screen public Vec3 WorldCameraPosition; // Assigned when camera is selected for rendering public Vec3 ScreenPixel; // Assigned when coordinate is projected to the screen // Texturing public Vec2 UVCoordinates; // Assigned when coordinate is projected to the screen // Lighting public IEnumerable<LightSource> LightSources; // Assigned when camera is selected for rendering } }","title":"File ShaderVariables.cs"},{"location":"doxygen/_skybox_8cs/","text":"File Skybox.cs File List > Render > src > Skybox.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name class GradientSkybox Skybox with a vertical gradient class Skybox Base class for rendering a skybox The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"File Skybox.cs"},{"location":"doxygen/_skybox_8cs/#file-skyboxcs","text":"File List > Render > src > Skybox.cs Go to the source code of this file.","title":"File Skybox.cs"},{"location":"doxygen/_skybox_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_skybox_8cs/#classes","text":"Type Name class GradientSkybox Skybox with a vertical gradient class Skybox Base class for rendering a skybox The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"Classes"},{"location":"doxygen/_skybox_8cs_source/","text":"File Skybox.cs File List > Render > src > Skybox.cs Go to the documentation of this file. using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Skybox { public virtual Color GetPixel(BaseCamera camera, int x, int y) { return Color.Black; } } public class GradientSkybox : Skybox { private Color bottom; private Color top; public GradientSkybox(Color first, Color second) { this.bottom = first; this.top = second; } private static Color Blend(Color backColor, Color color, double amount) { byte r = (byte) ((color.R * amount) + backColor.R * (1 - amount)); byte g = (byte) ((color.G * amount) + backColor.G * (1 - amount)); byte b = (byte) ((color.B * amount) + backColor.B * (1 - amount)); return Color.FromArgb(r, g, b); } public override Color GetPixel(BaseCamera camera, int x, int y) { var interpolation_factor = camera.ScreenToWorldPoint(new Vec2(x,y)).Normalized.Z; return Blend(bottom, top, interpolation_factor); } } }","title":"File Skybox.cs"},{"location":"doxygen/_skybox_8cs_source/#file-skyboxcs","text":"File List > Render > src > Skybox.cs Go to the documentation of this file. using System.Drawing; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public class Skybox { public virtual Color GetPixel(BaseCamera camera, int x, int y) { return Color.Black; } } public class GradientSkybox : Skybox { private Color bottom; private Color top; public GradientSkybox(Color first, Color second) { this.bottom = first; this.top = second; } private static Color Blend(Color backColor, Color color, double amount) { byte r = (byte) ((color.R * amount) + backColor.R * (1 - amount)); byte g = (byte) ((color.G * amount) + backColor.G * (1 - amount)); byte b = (byte) ((color.B * amount) + backColor.B * (1 - amount)); return Color.FromArgb(r, g, b); } public override Color GetPixel(BaseCamera camera, int x, int y) { var interpolation_factor = camera.ScreenToWorldPoint(new Vec2(x,y)).Normalized.Z; return Blend(bottom, top, interpolation_factor); } } }","title":"File Skybox.cs"},{"location":"doxygen/_uv_map_8cs/","text":"File UvMap.cs File List > Render > src > UvMap.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering Classes Type Name interface IUvMap Mapping of vertices to 2D UV coordinates class UV Mapping of vertices to 2D UV coordinates The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"File UvMap.cs"},{"location":"doxygen/_uv_map_8cs/#file-uvmapcs","text":"File List > Render > src > UvMap.cs Go to the source code of this file.","title":"File UvMap.cs"},{"location":"doxygen/_uv_map_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Rendering 3D Soft-rendering","title":"Namespaces"},{"location":"doxygen/_uv_map_8cs/#classes","text":"Type Name interface IUvMap Mapping of vertices to 2D UV coordinates class UV Mapping of vertices to 2D UV coordinates The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"Classes"},{"location":"doxygen/_uv_map_8cs_source/","text":"File UvMap.cs File List > Render > src > UvMap.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public interface IUvMap { Vec2 this[Vec3 vec] {get;} } public class UV : IUvMap, IEnumerable<Vec2> { private Dictionary<Vec3, Vec2> uvs = new Dictionary<Vec3, Vec2>(); public UV() {} public UV(IEnumerable<KeyValuePair<Vec3, Vec2>> keys) { foreach (var pair in keys) { AddMapping(pair.Key, pair.Value); } } private static Vec2 ToSpherical(Vec3 v) { // All values between -\u03c0 \u2264 \u03b8 \u2264 \u03c0 var phi = Math.Atan2(v.Y, v.X); // rotation around Z var theta = Math.Atan2(Math.Sqrt(v.X * v.X + v.Y * v.Y), v.Z); // rotation around X // All values between 0 and 1 return new Vec2( ((phi / (Math.PI)) + 1)/2.0, // Range (-\u03c0 \u2264 \u03b8 \u2264 \u03c0) -> (-1 \u2264 \u03b8 \u2264 1) -> (0 \u2264 \u03b8 \u2264 2) -> (0 \u2264 \u03b8 \u2264 1) (theta / (Math.PI)) // Range (0 \u2264 \u03b8 \u2264 \u03c0) -> (0 \u2264 \u03b8 \u2264 1) ); } public static UV Spherical(IEnumerable<Triangle> triangles) { UV map = new UV(); foreach (var tri in triangles) { map.AddMapping(tri.Item1, ToSpherical(tri.Item1)); map.AddMapping(tri.Item2, ToSpherical(tri.Item2)); map.AddMapping(tri.Item3, ToSpherical(tri.Item3)); } return map; } public void AddMapping(Vec3 key, Vec2 value) { this.uvs[key] = value; } public void RemoveMapping(Vec3 key) { this.uvs.Remove(key); } public IEnumerator<Vec2> GetEnumerator() { return uvs.Values.GetEnumerator(); } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public Vec2 this[Vec3 vec] { get { if (uvs.ContainsKey(vec)) { return uvs[vec]; } else { return Vec2.Zero; } } } } }","title":"File UvMap.cs"},{"location":"doxygen/_uv_map_8cs_source/#file-uvmapcs","text":"File List > Render > src > UvMap.cs Go to the documentation of this file. using System; using System.Collections; using System.Collections.Generic; using Qkmaxware.Geometry; namespace Qkmaxware.Rendering { public interface IUvMap { Vec2 this[Vec3 vec] {get;} } public class UV : IUvMap, IEnumerable<Vec2> { private Dictionary<Vec3, Vec2> uvs = new Dictionary<Vec3, Vec2>(); public UV() {} public UV(IEnumerable<KeyValuePair<Vec3, Vec2>> keys) { foreach (var pair in keys) { AddMapping(pair.Key, pair.Value); } } private static Vec2 ToSpherical(Vec3 v) { // All values between -\u03c0 \u2264 \u03b8 \u2264 \u03c0 var phi = Math.Atan2(v.Y, v.X); // rotation around Z var theta = Math.Atan2(Math.Sqrt(v.X * v.X + v.Y * v.Y), v.Z); // rotation around X // All values between 0 and 1 return new Vec2( ((phi / (Math.PI)) + 1)/2.0, // Range (-\u03c0 \u2264 \u03b8 \u2264 \u03c0) -> (-1 \u2264 \u03b8 \u2264 1) -> (0 \u2264 \u03b8 \u2264 2) -> (0 \u2264 \u03b8 \u2264 1) (theta / (Math.PI)) // Range (0 \u2264 \u03b8 \u2264 \u03c0) -> (0 \u2264 \u03b8 \u2264 1) ); } public static UV Spherical(IEnumerable<Triangle> triangles) { UV map = new UV(); foreach (var tri in triangles) { map.AddMapping(tri.Item1, ToSpherical(tri.Item1)); map.AddMapping(tri.Item2, ToSpherical(tri.Item2)); map.AddMapping(tri.Item3, ToSpherical(tri.Item3)); } return map; } public void AddMapping(Vec3 key, Vec2 value) { this.uvs[key] = value; } public void RemoveMapping(Vec3 key) { this.uvs.Remove(key); } public IEnumerator<Vec2> GetEnumerator() { return uvs.Values.GetEnumerator(); } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public Vec2 this[Vec3 vec] { get { if (uvs.ContainsKey(vec)) { return uvs[vec]; } else { return Vec2.Zero; } } } } }","title":"File UvMap.cs"},{"location":"doxygen/annotated/","text":"Class List Here are the classes, structs, unions and interfaces with brief descriptions: namespace Qkmaxware namespace Rendering 3D Soft-rendering class AmbientLight Soft light applied from all angles class Angle Angle manipulations class AnimatedScene Animate all animated scene nodes across several frames class BaseCamera Base class for a camera that can render a scene class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class GradientSkybox Skybox with a vertical gradient interface IAnimator Animated scene node interface IUvMap Mapping of vertices to 2D UV coordinates class LightSource Base class for light sources class Material Base class for all material rendering class PerspectiveCamera Camera for perspective rendering class PointLight Light applied from a point in space class Renderable Object that can be rendered by the camera class Resolutions Common resolution sizes class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube class Scene Scene for object management class SceneNode A node which exists within the scene graph struct ShaderVariables Variables that can be used by materials to apply shading class Skybox Base class for rendering a skybox class TexturedMaterial Base class for a material with a single texture class UV Mapping of vertices to 2D UV coordinates class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects namespace Geometry namespace System namespace Collections namespace Generic namespace Drawing namespace Linq","title":"Class List"},{"location":"doxygen/annotated/#class-list","text":"Here are the classes, structs, unions and interfaces with brief descriptions: namespace Qkmaxware namespace Rendering 3D Soft-rendering class AmbientLight Soft light applied from all angles class Angle Angle manipulations class AnimatedScene Animate all animated scene nodes across several frames class BaseCamera Base class for a camera that can render a scene class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class GradientSkybox Skybox with a vertical gradient interface IAnimator Animated scene node interface IUvMap Mapping of vertices to 2D UV coordinates class LightSource Base class for light sources class Material Base class for all material rendering class PerspectiveCamera Camera for perspective rendering class PointLight Light applied from a point in space class Renderable Object that can be rendered by the camera class Resolutions Common resolution sizes class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube class Scene Scene for object management class SceneNode A node which exists within the scene graph struct ShaderVariables Variables that can be used by materials to apply shading class Skybox Base class for rendering a skybox class TexturedMaterial Base class for a material with a single texture class UV Mapping of vertices to 2D UV coordinates class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects namespace Geometry namespace System namespace Collections namespace Generic namespace Drawing namespace Linq","title":"Class List"},{"location":"doxygen/class_member_enums/","text":"Class Member Enums","title":"Class Member Enums"},{"location":"doxygen/class_member_enums/#class-member-enums","text":"","title":"Class Member Enums"},{"location":"doxygen/class_member_functions/","text":"Class Member Functions a AnimatedScene ( Qkmaxware::Rendering::AnimatedScene ) Add ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) AddMapping ( Qkmaxware::Rendering::UV ) b BaseCamera ( Qkmaxware::Rendering::BaseCamera ) Blend ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::GradientSkybox ) c ClearDepth ( Qkmaxware::Rendering::BaseCamera ) ClearPixels ( Qkmaxware::Rendering::BaseCamera ) Clamp ( Qkmaxware::Rendering::TexturedMaterial ) ColourSample ( Qkmaxware::Rendering::TexturedMaterial ) d Direction ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) Dirty ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) DrawFlatBottomTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawFlatTopTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawLine ( Qkmaxware::Rendering::BaseCamera ) DrawVertex ( Qkmaxware::Rendering::BaseCamera ) Darken ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) DiffuseColour ( Qkmaxware::Rendering::DiffuseColour ) DiffuseTexture ( Qkmaxware::Rendering::DiffuseTexture ) Detach ( Qkmaxware::Rendering::SceneNode ) e Edge ( Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture , Qkmaxware::Rendering::Wireframe ) f Fragment ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture ) g GetEnumerator ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode , Qkmaxware::Rendering::UV ) GetPixel ( Qkmaxware::Rendering::GradientSkybox , Qkmaxware::Rendering::Skybox ) GradientSkybox ( Qkmaxware::Rendering::GradientSkybox ) i Intensity ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) l Lerp ( Qkmaxware::Rendering::BaseCamera ) m Mix ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Move ( Qkmaxware::Rendering::SceneNode ) o OnEarlyUpdate ( Qkmaxware::Rendering::IAnimator ) OnLateUpdate ( Qkmaxware::Rendering::IAnimator ) OnUpdate ( Qkmaxware::Rendering::IAnimator ) p PerspectiveCamera ( Qkmaxware::Rendering::PerspectiveCamera ) r Rasterize ( Qkmaxware::Rendering::BaseCamera ) Render ( Qkmaxware::Rendering::BaseCamera ) Renderable ( Qkmaxware::Rendering::Renderable ) Remove ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Rotate ( Qkmaxware::Rendering::SceneNode ) RotateAround ( Qkmaxware::Rendering::SceneNode ) RemoveMapping ( Qkmaxware::Rendering::UV ) s ScreenToWorldPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) SetClippingDistance ( Qkmaxware::Rendering::BaseCamera ) SetPixel ( Qkmaxware::Rendering::BaseCamera ) Spherical ( Qkmaxware::Rendering::UV ) t ToScreenSpace ( Qkmaxware::Rendering::PerspectiveCamera ) TexturedMaterial ( Qkmaxware::Rendering::TexturedMaterial ) ToSpherical ( Qkmaxware::Rendering::UV ) u UV ( Qkmaxware::Rendering::UV ) UnlitColour ( Qkmaxware::Rendering::UnlitColour ) UnlitTexture ( Qkmaxware::Rendering::UnlitTexture ) v Vert ( Qkmaxware::Rendering::Material ) w WorldToScreenPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) Wrap ( Qkmaxware::Rendering::TexturedMaterial ) Wireframe ( Qkmaxware::Rendering::Wireframe )","title":"Class Member Functions"},{"location":"doxygen/class_member_functions/#class-member-functions","text":"","title":"Class Member Functions"},{"location":"doxygen/class_member_functions/#a","text":"AnimatedScene ( Qkmaxware::Rendering::AnimatedScene ) Add ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) AddMapping ( Qkmaxware::Rendering::UV )","title":"a"},{"location":"doxygen/class_member_functions/#b","text":"BaseCamera ( Qkmaxware::Rendering::BaseCamera ) Blend ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::GradientSkybox )","title":"b"},{"location":"doxygen/class_member_functions/#c","text":"ClearDepth ( Qkmaxware::Rendering::BaseCamera ) ClearPixels ( Qkmaxware::Rendering::BaseCamera ) Clamp ( Qkmaxware::Rendering::TexturedMaterial ) ColourSample ( Qkmaxware::Rendering::TexturedMaterial )","title":"c"},{"location":"doxygen/class_member_functions/#d","text":"Direction ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) Dirty ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) DrawFlatBottomTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawFlatTopTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawLine ( Qkmaxware::Rendering::BaseCamera ) DrawVertex ( Qkmaxware::Rendering::BaseCamera ) Darken ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) DiffuseColour ( Qkmaxware::Rendering::DiffuseColour ) DiffuseTexture ( Qkmaxware::Rendering::DiffuseTexture ) Detach ( Qkmaxware::Rendering::SceneNode )","title":"d"},{"location":"doxygen/class_member_functions/#e","text":"Edge ( Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture , Qkmaxware::Rendering::Wireframe )","title":"e"},{"location":"doxygen/class_member_functions/#f","text":"Fragment ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture )","title":"f"},{"location":"doxygen/class_member_functions/#g","text":"GetEnumerator ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode , Qkmaxware::Rendering::UV ) GetPixel ( Qkmaxware::Rendering::GradientSkybox , Qkmaxware::Rendering::Skybox ) GradientSkybox ( Qkmaxware::Rendering::GradientSkybox )","title":"g"},{"location":"doxygen/class_member_functions/#i","text":"Intensity ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight )","title":"i"},{"location":"doxygen/class_member_functions/#l","text":"Lerp ( Qkmaxware::Rendering::BaseCamera )","title":"l"},{"location":"doxygen/class_member_functions/#m","text":"Mix ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Move ( Qkmaxware::Rendering::SceneNode )","title":"m"},{"location":"doxygen/class_member_functions/#o","text":"OnEarlyUpdate ( Qkmaxware::Rendering::IAnimator ) OnLateUpdate ( Qkmaxware::Rendering::IAnimator ) OnUpdate ( Qkmaxware::Rendering::IAnimator )","title":"o"},{"location":"doxygen/class_member_functions/#p","text":"PerspectiveCamera ( Qkmaxware::Rendering::PerspectiveCamera )","title":"p"},{"location":"doxygen/class_member_functions/#r","text":"Rasterize ( Qkmaxware::Rendering::BaseCamera ) Render ( Qkmaxware::Rendering::BaseCamera ) Renderable ( Qkmaxware::Rendering::Renderable ) Remove ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Rotate ( Qkmaxware::Rendering::SceneNode ) RotateAround ( Qkmaxware::Rendering::SceneNode ) RemoveMapping ( Qkmaxware::Rendering::UV )","title":"r"},{"location":"doxygen/class_member_functions/#s","text":"ScreenToWorldPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) SetClippingDistance ( Qkmaxware::Rendering::BaseCamera ) SetPixel ( Qkmaxware::Rendering::BaseCamera ) Spherical ( Qkmaxware::Rendering::UV )","title":"s"},{"location":"doxygen/class_member_functions/#t","text":"ToScreenSpace ( Qkmaxware::Rendering::PerspectiveCamera ) TexturedMaterial ( Qkmaxware::Rendering::TexturedMaterial ) ToSpherical ( Qkmaxware::Rendering::UV )","title":"t"},{"location":"doxygen/class_member_functions/#u","text":"UV ( Qkmaxware::Rendering::UV ) UnlitColour ( Qkmaxware::Rendering::UnlitColour ) UnlitTexture ( Qkmaxware::Rendering::UnlitTexture )","title":"u"},{"location":"doxygen/class_member_functions/#v","text":"Vert ( Qkmaxware::Rendering::Material )","title":"v"},{"location":"doxygen/class_member_functions/#w","text":"WorldToScreenPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) Wrap ( Qkmaxware::Rendering::TexturedMaterial ) Wireframe ( Qkmaxware::Rendering::Wireframe )","title":"w"},{"location":"doxygen/class_member_typedefs/","text":"Class Member Typedefs","title":"Class Member Typedefs"},{"location":"doxygen/class_member_typedefs/#class-member-typedefs","text":"","title":"Class Member Typedefs"},{"location":"doxygen/class_member_variables/","text":"Class Member Variables a Albedo ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) b bottom ( Qkmaxware::Rendering::GradientSkybox ) Backward ( Qkmaxware::Rendering::SceneNode ) c Colour ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe ) CoverPhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) children ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) d Deg2Rad ( Qkmaxware::Rendering::Angle ) DeltaTime ( Qkmaxware::Rendering::AnimatedScene ) Display1050p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1200p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1600p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display800p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display900p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display1080p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1440p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display2160p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display576p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display648p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display720p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display768p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1392p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1536p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display480p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display600p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display960p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Desktop ( Qkmaxware::Rendering::Resolutions::Icon ) Down ( Qkmaxware::Rendering::SceneNode ) f FPS ( Qkmaxware::Rendering::AnimatedScene ) farClipDistance ( Qkmaxware::Rendering::BaseCamera ) focallength ( Qkmaxware::Rendering::BaseCamera ) Forward ( Qkmaxware::Rendering::SceneNode ) l Left ( Qkmaxware::Rendering::SceneNode ) LocalToWorldMatrix ( Qkmaxware::Rendering::SceneNode ) LightSources ( Qkmaxware::Rendering::ShaderVariables ) m Material ( Qkmaxware::Rendering::Renderable ) Mesh ( Qkmaxware::Rendering::Renderable ) ModelToWorld ( Qkmaxware::Rendering::ShaderVariables ) n nearClipDistance ( Qkmaxware::Rendering::BaseCamera ) p ProfilePhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::Instagram , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Pinterest , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) Position ( Qkmaxware::Rendering::SceneNode ) r Rad2Deg ( Qkmaxware::Rendering::Angle ) Right ( Qkmaxware::Rendering::SceneNode ) s Scene ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::SceneNode ) ScreenPixel ( Qkmaxware::Rendering::ShaderVariables ) t top ( Qkmaxware::Rendering::GradientSkybox ) TwoSided ( Qkmaxware::Rendering::Material ) Taskbar ( Qkmaxware::Rendering::Resolutions::Icon ) ThumbnailPhoto ( Qkmaxware::Rendering::Resolutions::YouTube ) Transform ( Qkmaxware::Rendering::SceneNode ) Texture ( Qkmaxware::Rendering::TexturedMaterial ) TextureHeight ( Qkmaxware::Rendering::TexturedMaterial ) TextureWidth ( Qkmaxware::Rendering::TexturedMaterial ) u UVs ( Qkmaxware::Rendering::Renderable ) Up ( Qkmaxware::Rendering::SceneNode ) UVCoordinates ( Qkmaxware::Rendering::ShaderVariables ) uvs ( Qkmaxware::Rendering::UV ) w Web ( Qkmaxware::Rendering::Resolutions::Icon ) WorldToLocalMatrix ( Qkmaxware::Rendering::SceneNode ) WorldCameraPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldNormal ( Qkmaxware::Rendering::ShaderVariables ) WorldPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldToModel ( Qkmaxware::Rendering::ShaderVariables ) WrapMode ( Qkmaxware::Rendering::TexturedMaterial )","title":"Class Member Variables"},{"location":"doxygen/class_member_variables/#class-member-variables","text":"","title":"Class Member Variables"},{"location":"doxygen/class_member_variables/#a","text":"Albedo ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture )","title":"a"},{"location":"doxygen/class_member_variables/#b","text":"bottom ( Qkmaxware::Rendering::GradientSkybox ) Backward ( Qkmaxware::Rendering::SceneNode )","title":"b"},{"location":"doxygen/class_member_variables/#c","text":"Colour ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe ) CoverPhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) children ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode )","title":"c"},{"location":"doxygen/class_member_variables/#d","text":"Deg2Rad ( Qkmaxware::Rendering::Angle ) DeltaTime ( Qkmaxware::Rendering::AnimatedScene ) Display1050p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1200p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1600p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display800p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display900p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display1080p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1440p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display2160p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display576p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display648p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display720p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display768p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1392p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1536p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display480p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display600p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display960p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Desktop ( Qkmaxware::Rendering::Resolutions::Icon ) Down ( Qkmaxware::Rendering::SceneNode )","title":"d"},{"location":"doxygen/class_member_variables/#f","text":"FPS ( Qkmaxware::Rendering::AnimatedScene ) farClipDistance ( Qkmaxware::Rendering::BaseCamera ) focallength ( Qkmaxware::Rendering::BaseCamera ) Forward ( Qkmaxware::Rendering::SceneNode )","title":"f"},{"location":"doxygen/class_member_variables/#l","text":"Left ( Qkmaxware::Rendering::SceneNode ) LocalToWorldMatrix ( Qkmaxware::Rendering::SceneNode ) LightSources ( Qkmaxware::Rendering::ShaderVariables )","title":"l"},{"location":"doxygen/class_member_variables/#m","text":"Material ( Qkmaxware::Rendering::Renderable ) Mesh ( Qkmaxware::Rendering::Renderable ) ModelToWorld ( Qkmaxware::Rendering::ShaderVariables )","title":"m"},{"location":"doxygen/class_member_variables/#n","text":"nearClipDistance ( Qkmaxware::Rendering::BaseCamera )","title":"n"},{"location":"doxygen/class_member_variables/#p","text":"ProfilePhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::Instagram , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Pinterest , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) Position ( Qkmaxware::Rendering::SceneNode )","title":"p"},{"location":"doxygen/class_member_variables/#r","text":"Rad2Deg ( Qkmaxware::Rendering::Angle ) Right ( Qkmaxware::Rendering::SceneNode )","title":"r"},{"location":"doxygen/class_member_variables/#s","text":"Scene ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::SceneNode ) ScreenPixel ( Qkmaxware::Rendering::ShaderVariables )","title":"s"},{"location":"doxygen/class_member_variables/#t","text":"top ( Qkmaxware::Rendering::GradientSkybox ) TwoSided ( Qkmaxware::Rendering::Material ) Taskbar ( Qkmaxware::Rendering::Resolutions::Icon ) ThumbnailPhoto ( Qkmaxware::Rendering::Resolutions::YouTube ) Transform ( Qkmaxware::Rendering::SceneNode ) Texture ( Qkmaxware::Rendering::TexturedMaterial ) TextureHeight ( Qkmaxware::Rendering::TexturedMaterial ) TextureWidth ( Qkmaxware::Rendering::TexturedMaterial )","title":"t"},{"location":"doxygen/class_member_variables/#u","text":"UVs ( Qkmaxware::Rendering::Renderable ) Up ( Qkmaxware::Rendering::SceneNode ) UVCoordinates ( Qkmaxware::Rendering::ShaderVariables ) uvs ( Qkmaxware::Rendering::UV )","title":"u"},{"location":"doxygen/class_member_variables/#w","text":"Web ( Qkmaxware::Rendering::Resolutions::Icon ) WorldToLocalMatrix ( Qkmaxware::Rendering::SceneNode ) WorldCameraPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldNormal ( Qkmaxware::Rendering::ShaderVariables ) WorldPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldToModel ( Qkmaxware::Rendering::ShaderVariables ) WrapMode ( Qkmaxware::Rendering::TexturedMaterial )","title":"w"},{"location":"doxygen/class_members/","text":"Class Members a AnimatedScene ( Qkmaxware::Rendering::AnimatedScene ) Albedo ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Add ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) AddMapping ( Qkmaxware::Rendering::UV ) b BaseCamera ( Qkmaxware::Rendering::BaseCamera ) Blend ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::GradientSkybox ) bottom ( Qkmaxware::Rendering::GradientSkybox ) Backward ( Qkmaxware::Rendering::SceneNode ) c ClearDepth ( Qkmaxware::Rendering::BaseCamera ) ClearPixels ( Qkmaxware::Rendering::BaseCamera ) Colour ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe ) CoverPhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) children ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Clamp ( Qkmaxware::Rendering::TexturedMaterial ) ColourSample ( Qkmaxware::Rendering::TexturedMaterial ) d Direction ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) Deg2Rad ( Qkmaxware::Rendering::Angle ) DeltaTime ( Qkmaxware::Rendering::AnimatedScene ) Dirty ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) DrawFlatBottomTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawFlatTopTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawLine ( Qkmaxware::Rendering::BaseCamera ) DrawVertex ( Qkmaxware::Rendering::BaseCamera ) Darken ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) DiffuseColour ( Qkmaxware::Rendering::DiffuseColour ) DiffuseTexture ( Qkmaxware::Rendering::DiffuseTexture ) Display1050p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1200p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1600p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display800p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display900p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display1080p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1440p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display2160p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display576p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display648p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display720p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display768p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1392p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1536p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display480p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display600p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display960p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Desktop ( Qkmaxware::Rendering::Resolutions::Icon ) Detach ( Qkmaxware::Rendering::SceneNode ) Down ( Qkmaxware::Rendering::SceneNode ) e Edge ( Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture , Qkmaxware::Rendering::Wireframe ) f FPS ( Qkmaxware::Rendering::AnimatedScene ) farClipDistance ( Qkmaxware::Rendering::BaseCamera ) focallength ( Qkmaxware::Rendering::BaseCamera ) Fragment ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture ) Forward ( Qkmaxware::Rendering::SceneNode ) g GetEnumerator ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode , Qkmaxware::Rendering::UV ) GetPixel ( Qkmaxware::Rendering::GradientSkybox , Qkmaxware::Rendering::Skybox ) GradientSkybox ( Qkmaxware::Rendering::GradientSkybox ) i Intensity ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) l Lerp ( Qkmaxware::Rendering::BaseCamera ) Left ( Qkmaxware::Rendering::SceneNode ) LocalToWorldMatrix ( Qkmaxware::Rendering::SceneNode ) LightSources ( Qkmaxware::Rendering::ShaderVariables ) m Mix ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Material ( Qkmaxware::Rendering::Renderable ) Mesh ( Qkmaxware::Rendering::Renderable ) Move ( Qkmaxware::Rendering::SceneNode ) ModelToWorld ( Qkmaxware::Rendering::ShaderVariables ) n nearClipDistance ( Qkmaxware::Rendering::BaseCamera ) o OnEarlyUpdate ( Qkmaxware::Rendering::IAnimator ) OnLateUpdate ( Qkmaxware::Rendering::IAnimator ) OnUpdate ( Qkmaxware::Rendering::IAnimator ) p PerspectiveCamera ( Qkmaxware::Rendering::PerspectiveCamera ) ProfilePhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::Instagram , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Pinterest , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) Position ( Qkmaxware::Rendering::SceneNode ) r Rad2Deg ( Qkmaxware::Rendering::Angle ) Rasterize ( Qkmaxware::Rendering::BaseCamera ) Render ( Qkmaxware::Rendering::BaseCamera ) Renderable ( Qkmaxware::Rendering::Renderable ) Remove ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Right ( Qkmaxware::Rendering::SceneNode ) Rotate ( Qkmaxware::Rendering::SceneNode ) RotateAround ( Qkmaxware::Rendering::SceneNode ) RemoveMapping ( Qkmaxware::Rendering::UV ) s Scene ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::SceneNode ) ScreenToWorldPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) SetClippingDistance ( Qkmaxware::Rendering::BaseCamera ) SetPixel ( Qkmaxware::Rendering::BaseCamera ) ScreenPixel ( Qkmaxware::Rendering::ShaderVariables ) Spherical ( Qkmaxware::Rendering::UV ) t top ( Qkmaxware::Rendering::GradientSkybox ) TwoSided ( Qkmaxware::Rendering::Material ) ToScreenSpace ( Qkmaxware::Rendering::PerspectiveCamera ) Taskbar ( Qkmaxware::Rendering::Resolutions::Icon ) ThumbnailPhoto ( Qkmaxware::Rendering::Resolutions::YouTube ) Transform ( Qkmaxware::Rendering::SceneNode ) Texture ( Qkmaxware::Rendering::TexturedMaterial ) TextureHeight ( Qkmaxware::Rendering::TexturedMaterial ) TextureWidth ( Qkmaxware::Rendering::TexturedMaterial ) TexturedMaterial ( Qkmaxware::Rendering::TexturedMaterial ) ToSpherical ( Qkmaxware::Rendering::UV ) u UVs ( Qkmaxware::Rendering::Renderable ) Up ( Qkmaxware::Rendering::SceneNode ) UVCoordinates ( Qkmaxware::Rendering::ShaderVariables ) UV ( Qkmaxware::Rendering::UV ) uvs ( Qkmaxware::Rendering::UV ) UnlitColour ( Qkmaxware::Rendering::UnlitColour ) UnlitTexture ( Qkmaxware::Rendering::UnlitTexture ) v Vert ( Qkmaxware::Rendering::Material ) w WorldToScreenPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) Web ( Qkmaxware::Rendering::Resolutions::Icon ) WorldToLocalMatrix ( Qkmaxware::Rendering::SceneNode ) WorldCameraPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldNormal ( Qkmaxware::Rendering::ShaderVariables ) WorldPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldToModel ( Qkmaxware::Rendering::ShaderVariables ) Wrap ( Qkmaxware::Rendering::TexturedMaterial ) WrapMode ( Qkmaxware::Rendering::TexturedMaterial ) Wireframe ( Qkmaxware::Rendering::Wireframe )","title":"Class Members"},{"location":"doxygen/class_members/#class-members","text":"","title":"Class Members"},{"location":"doxygen/class_members/#a","text":"AnimatedScene ( Qkmaxware::Rendering::AnimatedScene ) Albedo ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Add ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) AddMapping ( Qkmaxware::Rendering::UV )","title":"a"},{"location":"doxygen/class_members/#b","text":"BaseCamera ( Qkmaxware::Rendering::BaseCamera ) Blend ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::GradientSkybox ) bottom ( Qkmaxware::Rendering::GradientSkybox ) Backward ( Qkmaxware::Rendering::SceneNode )","title":"b"},{"location":"doxygen/class_members/#c","text":"ClearDepth ( Qkmaxware::Rendering::BaseCamera ) ClearPixels ( Qkmaxware::Rendering::BaseCamera ) Colour ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe ) CoverPhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) children ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Clamp ( Qkmaxware::Rendering::TexturedMaterial ) ColourSample ( Qkmaxware::Rendering::TexturedMaterial )","title":"c"},{"location":"doxygen/class_members/#d","text":"Direction ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight ) Deg2Rad ( Qkmaxware::Rendering::Angle ) DeltaTime ( Qkmaxware::Rendering::AnimatedScene ) Dirty ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) DrawFlatBottomTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawFlatTopTriangle ( Qkmaxware::Rendering::BaseCamera ) DrawLine ( Qkmaxware::Rendering::BaseCamera ) DrawVertex ( Qkmaxware::Rendering::BaseCamera ) Darken ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) DiffuseColour ( Qkmaxware::Rendering::DiffuseColour ) DiffuseTexture ( Qkmaxware::Rendering::DiffuseTexture ) Display1050p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1200p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1600p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display800p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 ) Display900p ( Qkmaxware::Rendering::Resolutions::Aspect16x10 , Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display1080p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1440p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display2160p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display576p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display648p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 ) Display720p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display768p ( Qkmaxware::Rendering::Resolutions::Aspect16x9 , Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1392p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display1536p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display480p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display600p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Display960p ( Qkmaxware::Rendering::Resolutions::Aspect4x3 ) Desktop ( Qkmaxware::Rendering::Resolutions::Icon ) Detach ( Qkmaxware::Rendering::SceneNode ) Down ( Qkmaxware::Rendering::SceneNode )","title":"d"},{"location":"doxygen/class_members/#e","text":"Edge ( Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture , Qkmaxware::Rendering::Wireframe )","title":"e"},{"location":"doxygen/class_members/#f","text":"FPS ( Qkmaxware::Rendering::AnimatedScene ) farClipDistance ( Qkmaxware::Rendering::BaseCamera ) focallength ( Qkmaxware::Rendering::BaseCamera ) Fragment ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::Material , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::UnlitTexture ) Forward ( Qkmaxware::Rendering::SceneNode )","title":"f"},{"location":"doxygen/class_members/#g","text":"GetEnumerator ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode , Qkmaxware::Rendering::UV ) GetPixel ( Qkmaxware::Rendering::GradientSkybox , Qkmaxware::Rendering::Skybox ) GradientSkybox ( Qkmaxware::Rendering::GradientSkybox )","title":"g"},{"location":"doxygen/class_members/#i","text":"Intensity ( Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::PointLight )","title":"i"},{"location":"doxygen/class_members/#l","text":"Lerp ( Qkmaxware::Rendering::BaseCamera ) Left ( Qkmaxware::Rendering::SceneNode ) LocalToWorldMatrix ( Qkmaxware::Rendering::SceneNode ) LightSources ( Qkmaxware::Rendering::ShaderVariables )","title":"l"},{"location":"doxygen/class_members/#m","text":"Mix ( Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::DiffuseTexture ) Material ( Qkmaxware::Rendering::Renderable ) Mesh ( Qkmaxware::Rendering::Renderable ) Move ( Qkmaxware::Rendering::SceneNode ) ModelToWorld ( Qkmaxware::Rendering::ShaderVariables )","title":"m"},{"location":"doxygen/class_members/#n","text":"nearClipDistance ( Qkmaxware::Rendering::BaseCamera )","title":"n"},{"location":"doxygen/class_members/#o","text":"OnEarlyUpdate ( Qkmaxware::Rendering::IAnimator ) OnLateUpdate ( Qkmaxware::Rendering::IAnimator ) OnUpdate ( Qkmaxware::Rendering::IAnimator )","title":"o"},{"location":"doxygen/class_members/#p","text":"PerspectiveCamera ( Qkmaxware::Rendering::PerspectiveCamera ) ProfilePhoto ( Qkmaxware::Rendering::Resolutions::Facebook , Qkmaxware::Rendering::Resolutions::Instagram , Qkmaxware::Rendering::Resolutions::LinkedIn , Qkmaxware::Rendering::Resolutions::Pinterest , Qkmaxware::Rendering::Resolutions::Twitter , Qkmaxware::Rendering::Resolutions::YouTube ) Position ( Qkmaxware::Rendering::SceneNode )","title":"p"},{"location":"doxygen/class_members/#r","text":"Rad2Deg ( Qkmaxware::Rendering::Angle ) Rasterize ( Qkmaxware::Rendering::BaseCamera ) Render ( Qkmaxware::Rendering::BaseCamera ) Renderable ( Qkmaxware::Rendering::Renderable ) Remove ( Qkmaxware::Rendering::Scene , Qkmaxware::Rendering::SceneNode ) Right ( Qkmaxware::Rendering::SceneNode ) Rotate ( Qkmaxware::Rendering::SceneNode ) RotateAround ( Qkmaxware::Rendering::SceneNode ) RemoveMapping ( Qkmaxware::Rendering::UV )","title":"r"},{"location":"doxygen/class_members/#s","text":"Scene ( Qkmaxware::Rendering::AnimatedScene , Qkmaxware::Rendering::SceneNode ) ScreenToWorldPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) SetClippingDistance ( Qkmaxware::Rendering::BaseCamera ) SetPixel ( Qkmaxware::Rendering::BaseCamera ) ScreenPixel ( Qkmaxware::Rendering::ShaderVariables ) Spherical ( Qkmaxware::Rendering::UV )","title":"s"},{"location":"doxygen/class_members/#t","text":"top ( Qkmaxware::Rendering::GradientSkybox ) TwoSided ( Qkmaxware::Rendering::Material ) ToScreenSpace ( Qkmaxware::Rendering::PerspectiveCamera ) Taskbar ( Qkmaxware::Rendering::Resolutions::Icon ) ThumbnailPhoto ( Qkmaxware::Rendering::Resolutions::YouTube ) Transform ( Qkmaxware::Rendering::SceneNode ) Texture ( Qkmaxware::Rendering::TexturedMaterial ) TextureHeight ( Qkmaxware::Rendering::TexturedMaterial ) TextureWidth ( Qkmaxware::Rendering::TexturedMaterial ) TexturedMaterial ( Qkmaxware::Rendering::TexturedMaterial ) ToSpherical ( Qkmaxware::Rendering::UV )","title":"t"},{"location":"doxygen/class_members/#u","text":"UVs ( Qkmaxware::Rendering::Renderable ) Up ( Qkmaxware::Rendering::SceneNode ) UVCoordinates ( Qkmaxware::Rendering::ShaderVariables ) UV ( Qkmaxware::Rendering::UV ) uvs ( Qkmaxware::Rendering::UV ) UnlitColour ( Qkmaxware::Rendering::UnlitColour ) UnlitTexture ( Qkmaxware::Rendering::UnlitTexture )","title":"u"},{"location":"doxygen/class_members/#v","text":"Vert ( Qkmaxware::Rendering::Material )","title":"v"},{"location":"doxygen/class_members/#w","text":"WorldToScreenPoint ( Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::PerspectiveCamera ) Web ( Qkmaxware::Rendering::Resolutions::Icon ) WorldToLocalMatrix ( Qkmaxware::Rendering::SceneNode ) WorldCameraPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldNormal ( Qkmaxware::Rendering::ShaderVariables ) WorldPosition ( Qkmaxware::Rendering::ShaderVariables ) WorldToModel ( Qkmaxware::Rendering::ShaderVariables ) Wrap ( Qkmaxware::Rendering::TexturedMaterial ) WrapMode ( Qkmaxware::Rendering::TexturedMaterial ) Wireframe ( Qkmaxware::Rendering::Wireframe )","title":"w"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/","text":"Class Qkmaxware::Rendering::AmbientLight Class List > Qkmaxware > Rendering > AmbientLight Soft light applied from all angles Inherits the following classes: Qkmaxware::Rendering::LightSource Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name virtual override Vec3 Direction (Vec3 position, Vec3 normal) Direction of the light incident to the given position virtual override double Intensity (Vec3 position, Vec3 normal) Intensity of the light at the given position Public Functions inherited from Qkmaxware::Rendering::LightSource See Qkmaxware::Rendering::LightSource Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Public Functions Documentation function Direction inline virtual override Vec3 Qkmaxware::Rendering::AmbientLight::Direction ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: light direction Implements Qkmaxware::Rendering::LightSource::Direction function Intensity inline virtual override double Qkmaxware::Rendering::AmbientLight::Intensity ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 Implements Qkmaxware::Rendering::LightSource::Intensity The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"Class Qkmaxware::Rendering::AmbientLight"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#class-qkmaxwarerenderingambientlight","text":"Class List > Qkmaxware > Rendering > AmbientLight Soft light applied from all angles Inherits the following classes: Qkmaxware::Rendering::LightSource","title":"Class Qkmaxware::Rendering::AmbientLight"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#public-functions","text":"Type Name virtual override Vec3 Direction (Vec3 position, Vec3 normal) Direction of the light incident to the given position virtual override double Intensity (Vec3 position, Vec3 normal) Intensity of the light at the given position","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#public-functions-inherited-from-qkmaxwarerenderinglightsource","text":"See Qkmaxware::Rendering::LightSource Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position","title":"Public Functions inherited from Qkmaxware::Rendering::LightSource"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#function-direction","text":"inline virtual override Vec3 Qkmaxware::Rendering::AmbientLight::Direction ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: light direction Implements Qkmaxware::Rendering::LightSource::Direction","title":"function Direction"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_ambient_light/#function-intensity","text":"inline virtual override double Qkmaxware::Rendering::AmbientLight::Intensity ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 Implements Qkmaxware::Rendering::LightSource::Intensity The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"function Intensity"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/","text":"Class Qkmaxware::Rendering::Angle Class List > Qkmaxware > Rendering > Angle Angle manipulations Public Static Attributes Type Name readonly double Deg2Rad = = Math.PI / 180.0 Conversion factor from degrees to radians readonly double Rad2Deg = = 180.0 / Math.PI Conversion factor from radians to degrees Public Static Attributes Documentation variable Deg2Rad readonly double Qkmaxware.Rendering.Angle.Deg2Rad; variable Rad2Deg readonly double Qkmaxware.Rendering.Angle.Rad2Deg; The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Class Qkmaxware::Rendering::Angle"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/#class-qkmaxwarerenderingangle","text":"Class List > Qkmaxware > Rendering > Angle Angle manipulations","title":"Class Qkmaxware::Rendering::Angle"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/#public-static-attributes","text":"Type Name readonly double Deg2Rad = = Math.PI / 180.0 Conversion factor from degrees to radians readonly double Rad2Deg = = 180.0 / Math.PI Conversion factor from radians to degrees","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/#variable-deg2rad","text":"readonly double Qkmaxware.Rendering.Angle.Deg2Rad;","title":"variable Deg2Rad"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_angle/#variable-rad2deg","text":"readonly double Qkmaxware.Rendering.Angle.Rad2Deg; The documentation for this class was generated from the following file Render/src/Angle.cs","title":"variable Rad2Deg"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/","text":"Class Qkmaxware::Rendering::AnimatedScene Class List > Qkmaxware > Rendering > AnimatedScene Animate all animated scene nodes across several frames Inherits the following classes: IEnumerable< Color[,]> Public Attributes Type Name TimeSpan DeltaTime = => TimeSpan.FromSeconds(1.0/ FPS ) Time between frames int FPS = = 30 Number of frames per second Scene Scene Scene being animated Public Functions Type Name AnimatedScene ( Scene scene) Create an animated rendering of the given scene with a default camera AnimatedScene ( BaseCamera camera, Scene scene) Create an animated rendering of the given scene with the given camera IEnumerator< Color[,]> GetEnumerator () Public Attributes Documentation variable DeltaTime TimeSpan Qkmaxware.Rendering.AnimatedScene.DeltaTime; variable FPS int Qkmaxware.Rendering.AnimatedScene.FPS; variable Scene Scene Qkmaxware.Rendering.AnimatedScene.Scene; Public Functions Documentation function AnimatedScene [1/2] inline Qkmaxware::Rendering::AnimatedScene::AnimatedScene ( Scene scene ) Parameters: scene scene to animate function AnimatedScene [2/2] inline Qkmaxware::Rendering::AnimatedScene::AnimatedScene ( BaseCamera camera, Scene scene ) Parameters: camera camera scene scene to animate function GetEnumerator [1/2] inline IEnumerator< Color[,]> Qkmaxware::Rendering::AnimatedScene::GetEnumerator () The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Class Qkmaxware::Rendering::AnimatedScene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#class-qkmaxwarerenderinganimatedscene","text":"Class List > Qkmaxware > Rendering > AnimatedScene Animate all animated scene nodes across several frames Inherits the following classes: IEnumerable< Color[,]>","title":"Class Qkmaxware::Rendering::AnimatedScene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#public-attributes","text":"Type Name TimeSpan DeltaTime = => TimeSpan.FromSeconds(1.0/ FPS ) Time between frames int FPS = = 30 Number of frames per second Scene Scene Scene being animated","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#public-functions","text":"Type Name AnimatedScene ( Scene scene) Create an animated rendering of the given scene with a default camera AnimatedScene ( BaseCamera camera, Scene scene) Create an animated rendering of the given scene with the given camera IEnumerator< Color[,]> GetEnumerator ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#variable-deltatime","text":"TimeSpan Qkmaxware.Rendering.AnimatedScene.DeltaTime;","title":"variable DeltaTime"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#variable-fps","text":"int Qkmaxware.Rendering.AnimatedScene.FPS;","title":"variable FPS"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#variable-scene","text":"Scene Qkmaxware.Rendering.AnimatedScene.Scene;","title":"variable Scene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#function-animatedscene-12","text":"inline Qkmaxware::Rendering::AnimatedScene::AnimatedScene ( Scene scene ) Parameters: scene scene to animate","title":"function AnimatedScene [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#function-animatedscene-22","text":"inline Qkmaxware::Rendering::AnimatedScene::AnimatedScene ( BaseCamera camera, Scene scene ) Parameters: camera camera scene scene to animate","title":"function AnimatedScene [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_animated_scene/#function-getenumerator-12","text":"inline IEnumerator< Color[,]> Qkmaxware::Rendering::AnimatedScene::GetEnumerator () The documentation for this class was generated from the following file Render/src/Animation.cs","title":"function GetEnumerator [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/","text":"Class Qkmaxware::Rendering::BaseCamera Class List > Qkmaxware > Rendering > BaseCamera Base class for a camera that can render a scene Inherits the following classes: Qkmaxware::Rendering::SceneNode Inherited by the following classes: Qkmaxware::Rendering::PerspectiveCamera Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name BaseCamera (Size size) Create a new camera with the given image size void Render ( Scene scene) Render the given scene to the pixel buffer virtual abstract Vec3 ScreenToWorldPoint (Vec2 screen) = 0 Convert from a screen position to a world position void SetClippingDistance (double near, double far) Set the near and far clipping planes virtual abstract Vec3 WorldToScreenPoint (Vec3 world) = 0 Convert from a world position to a screen position Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Protected Attributes Type Name double farClipDistance = = 1000 readonly double focallength = = 1 double nearClipDistance = = 0.1 Protected Functions Type Name virtual abstract void Dirty () = 0 Event when camera properties change Public Functions Documentation function BaseCamera inline Qkmaxware::Rendering::BaseCamera::BaseCamera ( Size size ) Parameters: size rendered image size function Render [1/2] inline void Qkmaxware::Rendering::BaseCamera::Render ( Scene scene ) Parameters: scene scene to render function ScreenToWorldPoint virtual abstract Vec3 Qkmaxware::Rendering::BaseCamera::ScreenToWorldPoint ( Vec2 screen ) = 0 Parameters: screen screen position Returns: world position function SetClippingDistance inline void Qkmaxware::Rendering::BaseCamera::SetClippingDistance ( double near, double far ) Parameters: near near clip plane distance far far clip plane distance function WorldToScreenPoint virtual abstract Vec3 Qkmaxware::Rendering::BaseCamera::WorldToScreenPoint ( Vec3 world ) = 0 Parameters: world world position Returns: screen position Protected Attributes Documentation variable farClipDistance double Qkmaxware.Rendering.BaseCamera.farClipDistance; variable focallength readonly double Qkmaxware.Rendering.BaseCamera.focallength; variable nearClipDistance double Qkmaxware.Rendering.BaseCamera.nearClipDistance; Protected Functions Documentation function Dirty virtual abstract void Qkmaxware::Rendering::BaseCamera::Dirty () = 0 The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"Class Qkmaxware::Rendering::BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#class-qkmaxwarerenderingbasecamera","text":"Class List > Qkmaxware > Rendering > BaseCamera Base class for a camera that can render a scene Inherits the following classes: Qkmaxware::Rendering::SceneNode Inherited by the following classes: Qkmaxware::Rendering::PerspectiveCamera","title":"Class Qkmaxware::Rendering::BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#public-functions","text":"Type Name BaseCamera (Size size) Create a new camera with the given image size void Render ( Scene scene) Render the given scene to the pixel buffer virtual abstract Vec3 ScreenToWorldPoint (Vec2 screen) = 0 Convert from a screen position to a world position void SetClippingDistance (double near, double far) Set the near and far clipping planes virtual abstract Vec3 WorldToScreenPoint (Vec3 world) = 0 Convert from a world position to a screen position","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#protected-attributes","text":"Type Name double farClipDistance = = 1000 readonly double focallength = = 1 double nearClipDistance = = 0.1","title":"Protected Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#protected-functions","text":"Type Name virtual abstract void Dirty () = 0 Event when camera properties change","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-basecamera","text":"inline Qkmaxware::Rendering::BaseCamera::BaseCamera ( Size size ) Parameters: size rendered image size","title":"function BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-render-12","text":"inline void Qkmaxware::Rendering::BaseCamera::Render ( Scene scene ) Parameters: scene scene to render","title":"function Render [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-screentoworldpoint","text":"virtual abstract Vec3 Qkmaxware::Rendering::BaseCamera::ScreenToWorldPoint ( Vec2 screen ) = 0 Parameters: screen screen position Returns: world position","title":"function ScreenToWorldPoint"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-setclippingdistance","text":"inline void Qkmaxware::Rendering::BaseCamera::SetClippingDistance ( double near, double far ) Parameters: near near clip plane distance far far clip plane distance","title":"function SetClippingDistance"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-worldtoscreenpoint","text":"virtual abstract Vec3 Qkmaxware::Rendering::BaseCamera::WorldToScreenPoint ( Vec3 world ) = 0 Parameters: world world position Returns: screen position","title":"function WorldToScreenPoint"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#variable-farclipdistance","text":"double Qkmaxware.Rendering.BaseCamera.farClipDistance;","title":"variable farClipDistance"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#variable-focallength","text":"readonly double Qkmaxware.Rendering.BaseCamera.focallength;","title":"variable focallength"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#variable-nearclipdistance","text":"double Qkmaxware.Rendering.BaseCamera.nearClipDistance;","title":"variable nearClipDistance"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_base_camera/#function-dirty","text":"virtual abstract void Qkmaxware::Rendering::BaseCamera::Dirty () = 0 The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"function Dirty"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/","text":"Class Qkmaxware::Rendering::DiffuseColour Class List > Qkmaxware > Rendering > DiffuseColour Diffuse lit solid colour material Inherits the following classes: Qkmaxware::Rendering::Material Public Attributes Type Name double Albedo = = 1 Color Colour = = Color.White Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name DiffuseColour (Color colour) Create a new diffuse lit solid colour material virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Public Attributes Documentation variable Albedo double Qkmaxware.Rendering.DiffuseColour.Albedo; variable Colour Color Qkmaxware.Rendering.DiffuseColour.Colour; Public Functions Documentation function DiffuseColour inline Qkmaxware::Rendering::DiffuseColour::DiffuseColour ( Color colour ) Parameters: colour material colour function Fragment inline virtual override Color Qkmaxware::Rendering::DiffuseColour::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::DiffuseColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#class-qkmaxwarerenderingdiffusecolour","text":"Class List > Qkmaxware > Rendering > DiffuseColour Diffuse lit solid colour material Inherits the following classes: Qkmaxware::Rendering::Material","title":"Class Qkmaxware::Rendering::DiffuseColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-attributes","text":"Type Name double Albedo = = 1 Color Colour = = Color.White","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-functions","text":"Type Name DiffuseColour (Color colour) Create a new diffuse lit solid colour material virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#variable-albedo","text":"double Qkmaxware.Rendering.DiffuseColour.Albedo;","title":"variable Albedo"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#variable-colour","text":"Color Qkmaxware.Rendering.DiffuseColour.Colour;","title":"variable Colour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#function-diffusecolour","text":"inline Qkmaxware::Rendering::DiffuseColour::DiffuseColour ( Color colour ) Parameters: colour material colour","title":"function DiffuseColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_colour/#function-fragment","text":"inline virtual override Color Qkmaxware::Rendering::DiffuseColour::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment The documentation for this class was generated from the following file Render/src/Material.cs","title":"function Fragment"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/","text":"Class Qkmaxware::Rendering::DiffuseTexture Class List > Qkmaxware > Rendering > DiffuseTexture Diffuse lit textured material Inherits the following classes: Qkmaxware::Rendering::TexturedMaterial Public Attributes Type Name double Albedo = = 1 Color Colour = = Color.White Public Attributes inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name DiffuseTexture (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a diffuse shaded material with the given texture virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface Public Functions inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Protected Attributes inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1) Protected Functions inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates Public Attributes Documentation variable Albedo double Qkmaxware.Rendering.DiffuseTexture.Albedo; variable Colour Color Qkmaxware.Rendering.DiffuseTexture.Colour; Public Functions Documentation function DiffuseTexture inline Qkmaxware::Rendering::DiffuseTexture::DiffuseTexture ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) Parameters: texture texture wrap texture sampling mode function Fragment inline virtual override Color Qkmaxware::Rendering::DiffuseTexture::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::DiffuseTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#class-qkmaxwarerenderingdiffusetexture","text":"Class List > Qkmaxware > Rendering > DiffuseTexture Diffuse lit textured material Inherits the following classes: Qkmaxware::Rendering::TexturedMaterial","title":"Class Qkmaxware::Rendering::DiffuseTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-attributes","text":"Type Name double Albedo = = 1 Color Colour = = Color.White","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-attributes-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp","title":"Public Attributes inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-functions","text":"Type Name DiffuseTexture (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a diffuse shaded material with the given texture virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-functions-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode","title":"Public Functions inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#protected-attributes-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1)","title":"Protected Attributes inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#protected-functions-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates","title":"Protected Functions inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#variable-albedo","text":"double Qkmaxware.Rendering.DiffuseTexture.Albedo;","title":"variable Albedo"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#variable-colour","text":"Color Qkmaxware.Rendering.DiffuseTexture.Colour;","title":"variable Colour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#function-diffusetexture","text":"inline Qkmaxware::Rendering::DiffuseTexture::DiffuseTexture ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) Parameters: texture texture wrap texture sampling mode","title":"function DiffuseTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_diffuse_texture/#function-fragment","text":"inline virtual override Color Qkmaxware::Rendering::DiffuseTexture::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment The documentation for this class was generated from the following file Render/src/Material.cs","title":"function Fragment"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/","text":"Class Qkmaxware::Rendering::GradientSkybox Class List > Qkmaxware > Rendering > GradientSkybox Skybox with a vertical gradient Inherits the following classes: Qkmaxware::Rendering::Skybox Public Functions Type Name virtual override Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera GradientSkybox (Color first, Color second) Create a gradient skybox with two colours Public Functions inherited from Qkmaxware::Rendering::Skybox See Qkmaxware::Rendering::Skybox Type Name virtual Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera Public Functions Documentation function GetPixel inline virtual override Color Qkmaxware::Rendering::GradientSkybox::GetPixel ( BaseCamera camera, int x, int y ) Parameters: camera camera x pixel x y pixel y Returns: skybox color for camera pixel Implements Qkmaxware::Rendering::Skybox::GetPixel function GradientSkybox inline Qkmaxware::Rendering::GradientSkybox::GradientSkybox ( Color first, Color second ) Parameters: first colour at the bottom second colour at the top The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"Class Qkmaxware::Rendering::GradientSkybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#class-qkmaxwarerenderinggradientskybox","text":"Class List > Qkmaxware > Rendering > GradientSkybox Skybox with a vertical gradient Inherits the following classes: Qkmaxware::Rendering::Skybox","title":"Class Qkmaxware::Rendering::GradientSkybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#public-functions","text":"Type Name virtual override Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera GradientSkybox (Color first, Color second) Create a gradient skybox with two colours","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#public-functions-inherited-from-qkmaxwarerenderingskybox","text":"See Qkmaxware::Rendering::Skybox Type Name virtual Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera","title":"Public Functions inherited from Qkmaxware::Rendering::Skybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#function-getpixel","text":"inline virtual override Color Qkmaxware::Rendering::GradientSkybox::GetPixel ( BaseCamera camera, int x, int y ) Parameters: camera camera x pixel x y pixel y Returns: skybox color for camera pixel Implements Qkmaxware::Rendering::Skybox::GetPixel","title":"function GetPixel"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_gradient_skybox/#function-gradientskybox","text":"inline Qkmaxware::Rendering::GradientSkybox::GradientSkybox ( Color first, Color second ) Parameters: first colour at the bottom second colour at the top The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"function GradientSkybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/","text":"Class Qkmaxware::Rendering::LightSource Class List > Qkmaxware > Rendering > LightSource Base class for light sources Inherits the following classes: Qkmaxware::Rendering::SceneNode Inherited by the following classes: Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::PointLight Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Public Functions Documentation function Direction virtual abstract Vec3 Qkmaxware::Rendering::LightSource::Direction ( Vec3 position, Vec3 normal ) = 0 Parameters: position world position normal world normal Returns: light direction function Intensity virtual abstract double Qkmaxware::Rendering::LightSource::Intensity ( Vec3 position, Vec3 normal ) = 0 Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"Class Qkmaxware::Rendering::LightSource"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#class-qkmaxwarerenderinglightsource","text":"Class List > Qkmaxware > Rendering > LightSource Base class for light sources Inherits the following classes: Qkmaxware::Rendering::SceneNode Inherited by the following classes: Qkmaxware::Rendering::AmbientLight , Qkmaxware::Rendering::PointLight","title":"Class Qkmaxware::Rendering::LightSource"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#public-functions","text":"Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#function-direction","text":"virtual abstract Vec3 Qkmaxware::Rendering::LightSource::Direction ( Vec3 position, Vec3 normal ) = 0 Parameters: position world position normal world normal Returns: light direction","title":"function Direction"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_light_source/#function-intensity","text":"virtual abstract double Qkmaxware::Rendering::LightSource::Intensity ( Vec3 position, Vec3 normal ) = 0 Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"function Intensity"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/","text":"Class Qkmaxware::Rendering::Material Class List > Qkmaxware > Rendering > Material Base class for all material rendering Inherited by the following classes: Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::TexturedMaterial , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe Public Attributes Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Public Attributes Documentation variable TwoSided bool Qkmaxware.Rendering.Material.TwoSided; Public Functions Documentation function Edge inline virtual Color Qkmaxware::Rendering::Material::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour function Fragment inline virtual Color Qkmaxware::Rendering::Material::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face function Vert inline virtual Color Qkmaxware::Rendering::Material::Vert ( ShaderVariables variables ) Parameters: variables shading variables Returns: vertex colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#class-qkmaxwarerenderingmaterial","text":"Class List > Qkmaxware > Rendering > Material Base class for all material rendering Inherited by the following classes: Qkmaxware::Rendering::DiffuseColour , Qkmaxware::Rendering::TexturedMaterial , Qkmaxware::Rendering::UnlitColour , Qkmaxware::Rendering::Wireframe","title":"Class Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#public-attributes","text":"Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#public-functions","text":"Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#variable-twosided","text":"bool Qkmaxware.Rendering.Material.TwoSided;","title":"variable TwoSided"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#function-edge","text":"inline virtual Color Qkmaxware::Rendering::Material::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour","title":"function Edge"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#function-fragment","text":"inline virtual Color Qkmaxware::Rendering::Material::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face","title":"function Fragment"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_material/#function-vert","text":"inline virtual Color Qkmaxware::Rendering::Material::Vert ( ShaderVariables variables ) Parameters: variables shading variables Returns: vertex colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"function Vert"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/","text":"Class Qkmaxware::Rendering::PerspectiveCamera Class List > Qkmaxware > Rendering > PerspectiveCamera Camera for perspective rendering Inherits the following classes: Qkmaxware::Rendering::BaseCamera Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name PerspectiveCamera (Size size) virtual override Vec3 ScreenToWorldPoint (Vec2 screen) Convert a pixel on the screen to a point in the world virtual override Vec3 WorldToScreenPoint (Vec3 world) Convert a point in the world to a pixel on the screen Public Functions inherited from Qkmaxware::Rendering::BaseCamera See Qkmaxware::Rendering::BaseCamera Type Name BaseCamera (Size size) Create a new camera with the given image size void Render ( Scene scene) Render the given scene to the pixel buffer virtual abstract Vec3 ScreenToWorldPoint (Vec2 screen) = 0 Convert from a screen position to a world position void SetClippingDistance (double near, double far) Set the near and far clipping planes virtual abstract Vec3 WorldToScreenPoint (Vec3 world) = 0 Convert from a world position to a screen position Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Protected Attributes inherited from Qkmaxware::Rendering::BaseCamera See Qkmaxware::Rendering::BaseCamera Type Name double farClipDistance = = 1000 readonly double focallength = = 1 double nearClipDistance = = 0.1 Protected Functions Type Name virtual override void Dirty () Event when camera properties change Protected Functions inherited from Qkmaxware::Rendering::BaseCamera See Qkmaxware::Rendering::BaseCamera Type Name virtual abstract void Dirty () = 0 Event when camera properties change Public Functions Documentation function PerspectiveCamera inline Qkmaxware::Rendering::PerspectiveCamera::PerspectiveCamera ( Size size ) function ScreenToWorldPoint inline virtual override Vec3 Qkmaxware::Rendering::PerspectiveCamera::ScreenToWorldPoint ( Vec2 screen ) Parameters: screen screen pixel Returns: world point at the view plane Implements Qkmaxware::Rendering::BaseCamera::ScreenToWorldPoint function WorldToScreenPoint inline virtual override Vec3 Qkmaxware::Rendering::PerspectiveCamera::WorldToScreenPoint ( Vec3 world ) Parameters: world world point Returns: screen pixel Implements Qkmaxware::Rendering::BaseCamera::WorldToScreenPoint Protected Functions Documentation function Dirty inline virtual override void Qkmaxware::Rendering::PerspectiveCamera::Dirty () Implements Qkmaxware::Rendering::BaseCamera::Dirty The documentation for this class was generated from the following file Render/src/PerspectiveCamera.cs","title":"Class Qkmaxware::Rendering::PerspectiveCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#class-qkmaxwarerenderingperspectivecamera","text":"Class List > Qkmaxware > Rendering > PerspectiveCamera Camera for perspective rendering Inherits the following classes: Qkmaxware::Rendering::BaseCamera","title":"Class Qkmaxware::Rendering::PerspectiveCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#public-functions","text":"Type Name PerspectiveCamera (Size size) virtual override Vec3 ScreenToWorldPoint (Vec2 screen) Convert a pixel on the screen to a point in the world virtual override Vec3 WorldToScreenPoint (Vec3 world) Convert a point in the world to a pixel on the screen","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#public-functions-inherited-from-qkmaxwarerenderingbasecamera","text":"See Qkmaxware::Rendering::BaseCamera Type Name BaseCamera (Size size) Create a new camera with the given image size void Render ( Scene scene) Render the given scene to the pixel buffer virtual abstract Vec3 ScreenToWorldPoint (Vec2 screen) = 0 Convert from a screen position to a world position void SetClippingDistance (double near, double far) Set the near and far clipping planes virtual abstract Vec3 WorldToScreenPoint (Vec3 world) = 0 Convert from a world position to a screen position","title":"Public Functions inherited from Qkmaxware::Rendering::BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#protected-attributes-inherited-from-qkmaxwarerenderingbasecamera","text":"See Qkmaxware::Rendering::BaseCamera Type Name double farClipDistance = = 1000 readonly double focallength = = 1 double nearClipDistance = = 0.1","title":"Protected Attributes inherited from Qkmaxware::Rendering::BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#protected-functions","text":"Type Name virtual override void Dirty () Event when camera properties change","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#protected-functions-inherited-from-qkmaxwarerenderingbasecamera","text":"See Qkmaxware::Rendering::BaseCamera Type Name virtual abstract void Dirty () = 0 Event when camera properties change","title":"Protected Functions inherited from Qkmaxware::Rendering::BaseCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#function-perspectivecamera","text":"inline Qkmaxware::Rendering::PerspectiveCamera::PerspectiveCamera ( Size size )","title":"function PerspectiveCamera"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#function-screentoworldpoint","text":"inline virtual override Vec3 Qkmaxware::Rendering::PerspectiveCamera::ScreenToWorldPoint ( Vec2 screen ) Parameters: screen screen pixel Returns: world point at the view plane Implements Qkmaxware::Rendering::BaseCamera::ScreenToWorldPoint","title":"function ScreenToWorldPoint"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#function-worldtoscreenpoint","text":"inline virtual override Vec3 Qkmaxware::Rendering::PerspectiveCamera::WorldToScreenPoint ( Vec3 world ) Parameters: world world point Returns: screen pixel Implements Qkmaxware::Rendering::BaseCamera::WorldToScreenPoint","title":"function WorldToScreenPoint"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_perspective_camera/#function-dirty","text":"inline virtual override void Qkmaxware::Rendering::PerspectiveCamera::Dirty () Implements Qkmaxware::Rendering::BaseCamera::Dirty The documentation for this class was generated from the following file Render/src/PerspectiveCamera.cs","title":"function Dirty"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/","text":"Class Qkmaxware::Rendering::PointLight Class List > Qkmaxware > Rendering > PointLight Light applied from a point in space Inherits the following classes: Qkmaxware::Rendering::LightSource Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name virtual override Vec3 Direction (Vec3 position, Vec3 normal) Direction of the light incident to the given position virtual override double Intensity (Vec3 position, Vec3 normal) Intensity of the light at the given position Public Functions inherited from Qkmaxware::Rendering::LightSource See Qkmaxware::Rendering::LightSource Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Public Functions Documentation function Direction inline virtual override Vec3 Qkmaxware::Rendering::PointLight::Direction ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: light direction Implements Qkmaxware::Rendering::LightSource::Direction function Intensity inline virtual override double Qkmaxware::Rendering::PointLight::Intensity ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 Implements Qkmaxware::Rendering::LightSource::Intensity The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"Class Qkmaxware::Rendering::PointLight"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#class-qkmaxwarerenderingpointlight","text":"Class List > Qkmaxware > Rendering > PointLight Light applied from a point in space Inherits the following classes: Qkmaxware::Rendering::LightSource","title":"Class Qkmaxware::Rendering::PointLight"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#public-functions","text":"Type Name virtual override Vec3 Direction (Vec3 position, Vec3 normal) Direction of the light incident to the given position virtual override double Intensity (Vec3 position, Vec3 normal) Intensity of the light at the given position","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#public-functions-inherited-from-qkmaxwarerenderinglightsource","text":"See Qkmaxware::Rendering::LightSource Type Name virtual abstract Vec3 Direction (Vec3 position, Vec3 normal) = 0 Direction of the light incident to the given position virtual abstract double Intensity (Vec3 position, Vec3 normal) = 0 Intensity of the light at the given position","title":"Public Functions inherited from Qkmaxware::Rendering::LightSource"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#function-direction","text":"inline virtual override Vec3 Qkmaxware::Rendering::PointLight::Direction ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: light direction Implements Qkmaxware::Rendering::LightSource::Direction","title":"function Direction"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_point_light/#function-intensity","text":"inline virtual override double Qkmaxware::Rendering::PointLight::Intensity ( Vec3 position, Vec3 normal ) Parameters: position world position normal world normal Returns: intensity of the light between 0 and 1 Implements Qkmaxware::Rendering::LightSource::Intensity The documentation for this class was generated from the following file Render/src/LightSource.cs","title":"function Intensity"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/","text":"Class Qkmaxware::Rendering::Renderable Class List > Qkmaxware > Rendering > Renderable Object that can be rendered by the camera Inherits the following classes: Qkmaxware::Rendering::SceneNode Public Attributes Type Name Material Material = = new UnlitColour (Color.White) Render material IEnumerable< Triangle >? Mesh Mesh to render IUvMap ? UVs Vertex UV coordinates Public Attributes inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name Renderable () Create empty renderable Renderable (IEnumerable< Triangle > mesh) Create renderable with geometry Renderable (IEnumerable< Triangle > mesh, Material material, IUvMap ? uv=null) Create renderable geometry with uv's and texture data Public Functions inherited from Qkmaxware::Rendering::SceneNode See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Public Attributes Documentation variable Material Material Qkmaxware.Rendering.Renderable.Material; variable Mesh IEnumerable<Triangle>? Qkmaxware.Rendering.Renderable.Mesh; variable UVs IUvMap? Qkmaxware.Rendering.Renderable.UVs; Public Functions Documentation function Renderable [1/3] inline Qkmaxware::Rendering::Renderable::Renderable () function Renderable [2/3] inline Qkmaxware::Rendering::Renderable::Renderable ( IEnumerable< Triangle > mesh ) Parameters: mesh geometry function Renderable [3/3] inline Qkmaxware::Rendering::Renderable::Renderable ( IEnumerable< Triangle > mesh, Material material, IUvMap ? uv=null ) Parameters: mesh geometry material material uv uv map The documentation for this class was generated from the following file Render/src/Renderable.cs","title":"Class Qkmaxware::Rendering::Renderable"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#class-qkmaxwarerenderingrenderable","text":"Class List > Qkmaxware > Rendering > Renderable Object that can be rendered by the camera Inherits the following classes: Qkmaxware::Rendering::SceneNode","title":"Class Qkmaxware::Rendering::Renderable"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-attributes","text":"Type Name Material Material = = new UnlitColour (Color.White) Render material IEnumerable< Triangle >? Mesh Mesh to render IUvMap ? UVs Vertex UV coordinates","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-attributes-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-functions","text":"Type Name Renderable () Create empty renderable Renderable (IEnumerable< Triangle > mesh) Create renderable with geometry Renderable (IEnumerable< Triangle > mesh, Material material, IUvMap ? uv=null) Create renderable geometry with uv's and texture data","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-functions-inherited-from-qkmaxwarerenderingscenenode","text":"See Qkmaxware::Rendering::SceneNode Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions inherited from Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#variable-material","text":"Material Qkmaxware.Rendering.Renderable.Material;","title":"variable Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#variable-mesh","text":"IEnumerable<Triangle>? Qkmaxware.Rendering.Renderable.Mesh;","title":"variable Mesh"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#variable-uvs","text":"IUvMap? Qkmaxware.Rendering.Renderable.UVs;","title":"variable UVs"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#function-renderable-13","text":"inline Qkmaxware::Rendering::Renderable::Renderable ()","title":"function Renderable [1/3]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#function-renderable-23","text":"inline Qkmaxware::Rendering::Renderable::Renderable ( IEnumerable< Triangle > mesh ) Parameters: mesh geometry","title":"function Renderable [2/3]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_renderable/#function-renderable-33","text":"inline Qkmaxware::Rendering::Renderable::Renderable ( IEnumerable< Triangle > mesh, Material material, IUvMap ? uv=null ) Parameters: mesh geometry material material uv uv map The documentation for this class was generated from the following file Render/src/Renderable.cs","title":"function Renderable [3/3]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions/","text":"Class Qkmaxware::Rendering::Resolutions Class List > Qkmaxware > Rendering > Resolutions Common resolution sizes Classes Type Name class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions/#class-qkmaxwarerenderingresolutions","text":"Class List > Qkmaxware > Rendering > Resolutions Common resolution sizes","title":"Class Qkmaxware::Rendering::Resolutions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions/#classes","text":"Type Name class Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Facebook Resolutions common on Facebook __ class Icon Resolutions for application icons class Instagram Resolutions common on Instagram __ class LinkedIn Resolutions common on LinkedIn __ class Pinterest Resolutions common on Pinterest __ class Twitter Resolutions common on Twitter __ class YouTube Resolutions common on Youtube The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Classes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/","text":"Class Qkmaxware::Rendering::Resolutions::Aspect16x10 Class List > Qkmaxware > Rendering > Resolutions > Aspect16x10 Resolutions with a 16 x 10 aspect ratio Public Static Attributes Type Name readonly Size Display1050p = = new Size(1680,1050) 1680x1050 Resolution readonly Size Display1200p = = new Size(1920,1200) 1920x1200 Resolution readonly Size Display1600p = = new Size(2560,1600) 2560x1600 Resolution readonly Size Display800p = = new Size(1280,800) 1280x800 Resolution readonly Size Display900p = = new Size(1440,900) 1440x900 Resolution Public Static Attributes Documentation variable Display1050p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1050p; variable Display1200p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1200p; variable Display1600p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1600p; variable Display800p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display800p; variable Display900p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display900p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Aspect16x10"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#class-qkmaxwarerenderingresolutionsaspect16x10","text":"Class List > Qkmaxware > Rendering > Resolutions > Aspect16x10 Resolutions with a 16 x 10 aspect ratio","title":"Class Qkmaxware::Rendering::Resolutions::Aspect16x10"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#public-static-attributes","text":"Type Name readonly Size Display1050p = = new Size(1680,1050) 1680x1050 Resolution readonly Size Display1200p = = new Size(1920,1200) 1920x1200 Resolution readonly Size Display1600p = = new Size(2560,1600) 2560x1600 Resolution readonly Size Display800p = = new Size(1280,800) 1280x800 Resolution readonly Size Display900p = = new Size(1440,900) 1440x900 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#variable-display1050p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1050p;","title":"variable Display1050p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#variable-display1200p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1200p;","title":"variable Display1200p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#variable-display1600p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display1600p;","title":"variable Display1600p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#variable-display800p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display800p;","title":"variable Display800p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x10/#variable-display900p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x10.Display900p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable Display900p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/","text":"Class Qkmaxware::Rendering::Resolutions::Aspect16x9 Class List > Qkmaxware > Rendering > Resolutions > Aspect16x9 Resolutions with a 16 x 9 aspect ratio Public Static Attributes Type Name readonly Size Display1080p = = new Size(1920,1080) 1920x1080 Resolution readonly Size Display1440p = = new Size(2560,1440) 2560x1440 Resolution readonly Size Display2160p = = new Size(3840,2160) 3840x2160 Resolution readonly Size Display576p = = new Size(1024,576) 1024x576 Resolution readonly Size Display648p = = new Size(1152,648) 1152x648 Resolution readonly Size Display720p = = new Size(1280,720) 1280x720 Resolution readonly Size Display768p = = new Size(1366,768) 1366x768 Resolution readonly Size Display900p = = new Size(1600,900) 1600x900 Resolution Public Static Attributes Documentation variable Display1080p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display1080p; variable Display1440p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display1440p; variable Display2160p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display2160p; variable Display576p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display576p; variable Display648p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display648p; variable Display720p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display720p; variable Display768p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display768p; variable Display900p readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display900p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Aspect16x9"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#class-qkmaxwarerenderingresolutionsaspect16x9","text":"Class List > Qkmaxware > Rendering > Resolutions > Aspect16x9 Resolutions with a 16 x 9 aspect ratio","title":"Class Qkmaxware::Rendering::Resolutions::Aspect16x9"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#public-static-attributes","text":"Type Name readonly Size Display1080p = = new Size(1920,1080) 1920x1080 Resolution readonly Size Display1440p = = new Size(2560,1440) 2560x1440 Resolution readonly Size Display2160p = = new Size(3840,2160) 3840x2160 Resolution readonly Size Display576p = = new Size(1024,576) 1024x576 Resolution readonly Size Display648p = = new Size(1152,648) 1152x648 Resolution readonly Size Display720p = = new Size(1280,720) 1280x720 Resolution readonly Size Display768p = = new Size(1366,768) 1366x768 Resolution readonly Size Display900p = = new Size(1600,900) 1600x900 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display1080p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display1080p;","title":"variable Display1080p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display1440p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display1440p;","title":"variable Display1440p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display2160p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display2160p;","title":"variable Display2160p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display576p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display576p;","title":"variable Display576p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display648p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display648p;","title":"variable Display648p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display720p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display720p;","title":"variable Display720p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display768p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display768p;","title":"variable Display768p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect16x9/#variable-display900p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect16x9.Display900p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable Display900p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/","text":"Class Qkmaxware::Rendering::Resolutions::Aspect4x3 Class List > Qkmaxware > Rendering > Resolutions > Aspect4x3 Resolutions with a 4 x 3 aspect ratio Public Static Attributes Type Name readonly Size Display1050p = = new Size(1400,1050) 1400x1050 Resolution readonly Size Display1080p = = new Size(1440,1080) 1400x1080 Resolution readonly Size Display1200p = = new Size(1600,1200) 1600x1200 Resolution readonly Size Display1392p = = new Size(1856,1392) 1856x1392 Resolution readonly Size Display1440p = = new Size(1920,1440) 1920x1440 Resolution readonly Size Display1536p = = new Size(2048,1536) 2048x1536 Resolution readonly Size Display480p = = new Size(640,480) 640x480 Resolution readonly Size Display600p = = new Size(800,600) 800x600 Resolution readonly Size Display720p = = new Size(960,720) 960x720 Resolution readonly Size Display768p = = new Size(1024,768) 1024x768 Resolution readonly Size Display960p = = new Size(1280,960) 1280x960 Resolution Public Static Attributes Documentation variable Display1050p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1050p; variable Display1080p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1080p; variable Display1200p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1200p; variable Display1392p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1392p; variable Display1440p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1440p; variable Display1536p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1536p; variable Display480p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display480p; variable Display600p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display600p; variable Display720p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display720p; variable Display768p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display768p; variable Display960p readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display960p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Aspect4x3"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#class-qkmaxwarerenderingresolutionsaspect4x3","text":"Class List > Qkmaxware > Rendering > Resolutions > Aspect4x3 Resolutions with a 4 x 3 aspect ratio","title":"Class Qkmaxware::Rendering::Resolutions::Aspect4x3"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#public-static-attributes","text":"Type Name readonly Size Display1050p = = new Size(1400,1050) 1400x1050 Resolution readonly Size Display1080p = = new Size(1440,1080) 1400x1080 Resolution readonly Size Display1200p = = new Size(1600,1200) 1600x1200 Resolution readonly Size Display1392p = = new Size(1856,1392) 1856x1392 Resolution readonly Size Display1440p = = new Size(1920,1440) 1920x1440 Resolution readonly Size Display1536p = = new Size(2048,1536) 2048x1536 Resolution readonly Size Display480p = = new Size(640,480) 640x480 Resolution readonly Size Display600p = = new Size(800,600) 800x600 Resolution readonly Size Display720p = = new Size(960,720) 960x720 Resolution readonly Size Display768p = = new Size(1024,768) 1024x768 Resolution readonly Size Display960p = = new Size(1280,960) 1280x960 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1050p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1050p;","title":"variable Display1050p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1080p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1080p;","title":"variable Display1080p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1200p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1200p;","title":"variable Display1200p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1392p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1392p;","title":"variable Display1392p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1440p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1440p;","title":"variable Display1440p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display1536p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display1536p;","title":"variable Display1536p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display480p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display480p;","title":"variable Display480p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display600p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display600p;","title":"variable Display600p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display720p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display720p;","title":"variable Display720p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display768p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display768p;","title":"variable Display768p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_aspect4x3/#variable-display960p","text":"readonly Size Qkmaxware.Rendering.Resolutions.Aspect4x3.Display960p; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable Display960p"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/","text":"Class Qkmaxware::Rendering::Resolutions::Facebook Class List > Qkmaxware > Rendering > Resolutions > Facebook Resolutions common on Facebook __ Public Static Attributes Type Name readonly Size CoverPhoto = = new Size(1640, 624) 1640x624 Resolution readonly Size ProfilePhoto = = new Size(160, 160) 160x160 Resolution Public Static Attributes Documentation variable CoverPhoto readonly Size Qkmaxware.Rendering.Resolutions.Facebook.CoverPhoto; variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.Facebook.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Facebook"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/#class-qkmaxwarerenderingresolutionsfacebook","text":"Class List > Qkmaxware > Rendering > Resolutions > Facebook Resolutions common on Facebook __","title":"Class Qkmaxware::Rendering::Resolutions::Facebook"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/#public-static-attributes","text":"Type Name readonly Size CoverPhoto = = new Size(1640, 624) 1640x624 Resolution readonly Size ProfilePhoto = = new Size(160, 160) 160x160 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/#variable-coverphoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Facebook.CoverPhoto;","title":"variable CoverPhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_facebook/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Facebook.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/","text":"Class Qkmaxware::Rendering::Resolutions::Icon Class List > Qkmaxware > Rendering > Resolutions > Icon Resolutions for application icons Public Static Attributes Type Name readonly Size Desktop = = new Size(96, 96) 96x96 Resolution readonly Size Taskbar = = new Size(32, 32) 32x32 Resolution readonly Size Web = = new Size(16, 16) 16x16 Resolution Public Static Attributes Documentation variable Desktop readonly Size Qkmaxware.Rendering.Resolutions.Icon.Desktop; variable Taskbar readonly Size Qkmaxware.Rendering.Resolutions.Icon.Taskbar; variable Web readonly Size Qkmaxware.Rendering.Resolutions.Icon.Web; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Icon"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#class-qkmaxwarerenderingresolutionsicon","text":"Class List > Qkmaxware > Rendering > Resolutions > Icon Resolutions for application icons","title":"Class Qkmaxware::Rendering::Resolutions::Icon"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#public-static-attributes","text":"Type Name readonly Size Desktop = = new Size(96, 96) 96x96 Resolution readonly Size Taskbar = = new Size(32, 32) 32x32 Resolution readonly Size Web = = new Size(16, 16) 16x16 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#variable-desktop","text":"readonly Size Qkmaxware.Rendering.Resolutions.Icon.Desktop;","title":"variable Desktop"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#variable-taskbar","text":"readonly Size Qkmaxware.Rendering.Resolutions.Icon.Taskbar;","title":"variable Taskbar"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_icon/#variable-web","text":"readonly Size Qkmaxware.Rendering.Resolutions.Icon.Web; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable Web"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_instagram/","text":"Class Qkmaxware::Rendering::Resolutions::Instagram Class List > Qkmaxware > Rendering > Resolutions > Instagram Resolutions common on Instagram __ Public Static Attributes Type Name readonly Size ProfilePhoto = = new Size(110, 110) 110x110 Resolution Public Static Attributes Documentation variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.Instagram.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Instagram"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_instagram/#class-qkmaxwarerenderingresolutionsinstagram","text":"Class List > Qkmaxware > Rendering > Resolutions > Instagram Resolutions common on Instagram __","title":"Class Qkmaxware::Rendering::Resolutions::Instagram"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_instagram/#public-static-attributes","text":"Type Name readonly Size ProfilePhoto = = new Size(110, 110) 110x110 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_instagram/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_instagram/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Instagram.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/","text":"Class Qkmaxware::Rendering::Resolutions::LinkedIn Class List > Qkmaxware > Rendering > Resolutions > LinkedIn Resolutions common on LinkedIn __ Public Static Attributes Type Name readonly Size CoverPhoto = = new Size(646, 220) 646x220 Resolution readonly Size ProfilePhoto = = new Size(400, 400) 400x400 Resolution Public Static Attributes Documentation variable CoverPhoto readonly Size Qkmaxware.Rendering.Resolutions.LinkedIn.CoverPhoto; variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.LinkedIn.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::LinkedIn"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/#class-qkmaxwarerenderingresolutionslinkedin","text":"Class List > Qkmaxware > Rendering > Resolutions > LinkedIn Resolutions common on LinkedIn __","title":"Class Qkmaxware::Rendering::Resolutions::LinkedIn"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/#public-static-attributes","text":"Type Name readonly Size CoverPhoto = = new Size(646, 220) 646x220 Resolution readonly Size ProfilePhoto = = new Size(400, 400) 400x400 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/#variable-coverphoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.LinkedIn.CoverPhoto;","title":"variable CoverPhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_linked_in/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.LinkedIn.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_pinterest/","text":"Class Qkmaxware::Rendering::Resolutions::Pinterest Class List > Qkmaxware > Rendering > Resolutions > Pinterest Resolutions common on Pinterest __ Public Static Attributes Type Name readonly Size ProfilePhoto = = new Size(165, 165) 165x165 Resolution Public Static Attributes Documentation variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.Pinterest.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Pinterest"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_pinterest/#class-qkmaxwarerenderingresolutionspinterest","text":"Class List > Qkmaxware > Rendering > Resolutions > Pinterest Resolutions common on Pinterest __","title":"Class Qkmaxware::Rendering::Resolutions::Pinterest"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_pinterest/#public-static-attributes","text":"Type Name readonly Size ProfilePhoto = = new Size(165, 165) 165x165 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_pinterest/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_pinterest/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Pinterest.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/","text":"Class Qkmaxware::Rendering::Resolutions::Twitter Class List > Qkmaxware > Rendering > Resolutions > Twitter Resolutions common on Twitter __ Public Static Attributes Type Name readonly Size CoverPhoto = = new Size(1500, 1500) 1500x1500 Resolution readonly Size ProfilePhoto = = new Size(400, 400) 400x400 Resolution Public Static Attributes Documentation variable CoverPhoto readonly Size Qkmaxware.Rendering.Resolutions.Twitter.CoverPhoto; variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.Twitter.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::Twitter"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/#class-qkmaxwarerenderingresolutionstwitter","text":"Class List > Qkmaxware > Rendering > Resolutions > Twitter Resolutions common on Twitter __","title":"Class Qkmaxware::Rendering::Resolutions::Twitter"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/#public-static-attributes","text":"Type Name readonly Size CoverPhoto = = new Size(1500, 1500) 1500x1500 Resolution readonly Size ProfilePhoto = = new Size(400, 400) 400x400 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/#variable-coverphoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Twitter.CoverPhoto;","title":"variable CoverPhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_twitter/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.Twitter.ProfilePhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/","text":"Class Qkmaxware::Rendering::Resolutions::YouTube Class List > Qkmaxware > Rendering > Resolutions > YouTube Resolutions common on Youtube Public Static Attributes Type Name readonly Size CoverPhoto = = new Size(2560, 1440) 2560x1440 Resolution readonly Size ProfilePhoto = = new Size(800, 800) 800x800 Resolution readonly Size ThumbnailPhoto = = new Size(1280, 720) 1280x720 Resolution Public Static Attributes Documentation variable CoverPhoto readonly Size Qkmaxware.Rendering.Resolutions.YouTube.CoverPhoto; variable ProfilePhoto readonly Size Qkmaxware.Rendering.Resolutions.YouTube.ProfilePhoto; variable ThumbnailPhoto readonly Size Qkmaxware.Rendering.Resolutions.YouTube.ThumbnailPhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"Class Qkmaxware::Rendering::Resolutions::YouTube"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#class-qkmaxwarerenderingresolutionsyoutube","text":"Class List > Qkmaxware > Rendering > Resolutions > YouTube Resolutions common on Youtube","title":"Class Qkmaxware::Rendering::Resolutions::YouTube"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#public-static-attributes","text":"Type Name readonly Size CoverPhoto = = new Size(2560, 1440) 2560x1440 Resolution readonly Size ProfilePhoto = = new Size(800, 800) 800x800 Resolution readonly Size ThumbnailPhoto = = new Size(1280, 720) 1280x720 Resolution","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#variable-coverphoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.YouTube.CoverPhoto;","title":"variable CoverPhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#variable-profilephoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.YouTube.ProfilePhoto;","title":"variable ProfilePhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_resolutions_1_1_you_tube/#variable-thumbnailphoto","text":"readonly Size Qkmaxware.Rendering.Resolutions.YouTube.ThumbnailPhoto; The documentation for this class was generated from the following file Render/src/Resolutions.cs","title":"variable ThumbnailPhoto"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/","text":"Class Qkmaxware::Rendering::Scene Class List > Qkmaxware > Rendering > Scene Scene for object management Inherits the following classes: IEnumerable< SceneNode > Public Functions Type Name void Add ( SceneNode node) Add a node to the scene graph's root level IEnumerator< SceneNode > GetEnumerator () void Remove ( SceneNode node) Remove a node from the scene graph's root level Public Functions Documentation function Add inline void Qkmaxware::Rendering::Scene::Add ( SceneNode node ) Parameters: node node to add function GetEnumerator [1/2] inline IEnumerator< SceneNode > Qkmaxware::Rendering::Scene::GetEnumerator () function Remove inline void Qkmaxware::Rendering::Scene::Remove ( SceneNode node ) Parameters: node node to remove The documentation for this class was generated from the following file Render/src/Scene.cs","title":"Class Qkmaxware::Rendering::Scene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#class-qkmaxwarerenderingscene","text":"Class List > Qkmaxware > Rendering > Scene Scene for object management Inherits the following classes: IEnumerable< SceneNode >","title":"Class Qkmaxware::Rendering::Scene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#public-functions","text":"Type Name void Add ( SceneNode node) Add a node to the scene graph's root level IEnumerator< SceneNode > GetEnumerator () void Remove ( SceneNode node) Remove a node from the scene graph's root level","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#function-add","text":"inline void Qkmaxware::Rendering::Scene::Add ( SceneNode node ) Parameters: node node to add","title":"function Add"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#function-getenumerator-12","text":"inline IEnumerator< SceneNode > Qkmaxware::Rendering::Scene::GetEnumerator ()","title":"function GetEnumerator [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene/#function-remove","text":"inline void Qkmaxware::Rendering::Scene::Remove ( SceneNode node ) Parameters: node node to remove The documentation for this class was generated from the following file Render/src/Scene.cs","title":"function Remove"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/","text":"Class Qkmaxware::Rendering::SceneNode Class List > Qkmaxware > Rendering > SceneNode A node which exists within the scene graph Inherits the following classes: IEnumerable< SceneNode > Inherited by the following classes: Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::Renderable Public Attributes Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space Public Functions Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space Public Attributes Documentation variable Backward Vec3 Qkmaxware.Rendering.SceneNode.Backward; variable Down Vec3 Qkmaxware.Rendering.SceneNode.Down; variable Forward Vec3 Qkmaxware.Rendering.SceneNode.Forward; variable Left Vec3 Qkmaxware.Rendering.SceneNode.Left; variable LocalToWorldMatrix Transformation Qkmaxware.Rendering.SceneNode.LocalToWorldMatrix; variable Position Vec3 Qkmaxware.Rendering.SceneNode.Position; variable Right Vec3 Qkmaxware.Rendering.SceneNode.Right; variable Scene Scene? Qkmaxware.Rendering.SceneNode.Scene; variable Transform Transformation Qkmaxware.Rendering.SceneNode.Transform; variable Up Vec3 Qkmaxware.Rendering.SceneNode.Up; variable WorldToLocalMatrix Transformation Qkmaxware.Rendering.SceneNode.WorldToLocalMatrix; Public Functions Documentation function Add inline void Qkmaxware::Rendering::SceneNode::Add ( SceneNode node ) Parameters: node node to add function Detach inline void Qkmaxware::Rendering::SceneNode::Detach () function GetEnumerator [1/2] inline IEnumerator< SceneNode > Qkmaxware::Rendering::SceneNode::GetEnumerator () function Move inline void Qkmaxware::Rendering::SceneNode::Move ( Vec3 delta ) Parameters: delta amount to move by function Remove inline void Qkmaxware::Rendering::SceneNode::Remove ( SceneNode node ) Parameters: node node to remove function Rotate inline void Qkmaxware::Rendering::SceneNode::Rotate ( Vec3 axis, double angle ) Parameters: axis axis to rotate angle rotation amount function RotateAround inline void Qkmaxware::Rendering::SceneNode::RotateAround ( Vec3 point, Vec3 axis, double angle ) Parameters: point point to orbit axis axis of rotation angle rotation amount The documentation for this class was generated from the following file Render/src/SceneNode.cs","title":"Class Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#class-qkmaxwarerenderingscenenode","text":"Class List > Qkmaxware > Rendering > SceneNode A node which exists within the scene graph Inherits the following classes: IEnumerable< SceneNode > Inherited by the following classes: Qkmaxware::Rendering::BaseCamera , Qkmaxware::Rendering::LightSource , Qkmaxware::Rendering::Renderable","title":"Class Qkmaxware::Rendering::SceneNode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#public-attributes","text":"Type Name Vec3 Backward = => - Forward World aligned backwards vector Vec3 Down = => - Up World aligned down vector Vec3 Forward = => LocalToWorldMatrix * Vec3.J World aligned forward vector Vec3 Left = => - Right World aligned left vector Transformation LocalToWorldMatrix = => (Parent != null) ? Parent.LocalToWorldMatrix * this.Transform : this.Transform Matrix to convert from local to world space Vec3 Position = => LocalToWorldMatrix * Vec3.Zero World position of this node Vec3 Right = => LocalToWorldMatrix * Vec3.I World aligned right vector Scene ? Scene = => (Parent != null) ? Parent.Scene : this.root_scene Scene in which this node belongs Transformation Transform = = Transformation.Identity() Local transformation matrix representing the coordinate frame for this node Vec3 Up = => LocalToWorldMatrix * Vec3.K World aligned up vector Transformation WorldToLocalMatrix = => LocalToWorldMatrix.Inverse Matrix to convert from world to local space","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#public-functions","text":"Type Name void Add ( SceneNode node) Add a node to the scene graph under this node void Detach () Remove this node from the scene graph IEnumerator< SceneNode > GetEnumerator () void Move (Vec3 delta) Move this node void Remove ( SceneNode node) Remove a node from the scene graph void Rotate (Vec3 axis, double angle) Rotate this coordinate frame about an axis void RotateAround (Vec3 point, Vec3 axis, double angle) Rotate this node around a point in space","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-backward","text":"Vec3 Qkmaxware.Rendering.SceneNode.Backward;","title":"variable Backward"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-down","text":"Vec3 Qkmaxware.Rendering.SceneNode.Down;","title":"variable Down"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-forward","text":"Vec3 Qkmaxware.Rendering.SceneNode.Forward;","title":"variable Forward"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-left","text":"Vec3 Qkmaxware.Rendering.SceneNode.Left;","title":"variable Left"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-localtoworldmatrix","text":"Transformation Qkmaxware.Rendering.SceneNode.LocalToWorldMatrix;","title":"variable LocalToWorldMatrix"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-position","text":"Vec3 Qkmaxware.Rendering.SceneNode.Position;","title":"variable Position"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-right","text":"Vec3 Qkmaxware.Rendering.SceneNode.Right;","title":"variable Right"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-scene","text":"Scene? Qkmaxware.Rendering.SceneNode.Scene;","title":"variable Scene"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-transform","text":"Transformation Qkmaxware.Rendering.SceneNode.Transform;","title":"variable Transform"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-up","text":"Vec3 Qkmaxware.Rendering.SceneNode.Up;","title":"variable Up"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#variable-worldtolocalmatrix","text":"Transformation Qkmaxware.Rendering.SceneNode.WorldToLocalMatrix;","title":"variable WorldToLocalMatrix"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-add","text":"inline void Qkmaxware::Rendering::SceneNode::Add ( SceneNode node ) Parameters: node node to add","title":"function Add"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-detach","text":"inline void Qkmaxware::Rendering::SceneNode::Detach ()","title":"function Detach"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-getenumerator-12","text":"inline IEnumerator< SceneNode > Qkmaxware::Rendering::SceneNode::GetEnumerator ()","title":"function GetEnumerator [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-move","text":"inline void Qkmaxware::Rendering::SceneNode::Move ( Vec3 delta ) Parameters: delta amount to move by","title":"function Move"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-remove","text":"inline void Qkmaxware::Rendering::SceneNode::Remove ( SceneNode node ) Parameters: node node to remove","title":"function Remove"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-rotate","text":"inline void Qkmaxware::Rendering::SceneNode::Rotate ( Vec3 axis, double angle ) Parameters: axis axis to rotate angle rotation amount","title":"function Rotate"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_scene_node/#function-rotatearound","text":"inline void Qkmaxware::Rendering::SceneNode::RotateAround ( Vec3 point, Vec3 axis, double angle ) Parameters: point point to orbit axis axis of rotation angle rotation amount The documentation for this class was generated from the following file Render/src/SceneNode.cs","title":"function RotateAround"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_skybox/","text":"Class Qkmaxware::Rendering::Skybox Class List > Qkmaxware > Rendering > Skybox Base class for rendering a skybox Inherited by the following classes: Qkmaxware::Rendering::GradientSkybox Public Functions Type Name virtual Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera Public Functions Documentation function GetPixel inline virtual Color Qkmaxware::Rendering::Skybox::GetPixel ( BaseCamera camera, int x, int y ) Parameters: camera camera x pixel x y pixel y Returns: skybox color for camera pixel The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"Class Qkmaxware::Rendering::Skybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_skybox/#class-qkmaxwarerenderingskybox","text":"Class List > Qkmaxware > Rendering > Skybox Base class for rendering a skybox Inherited by the following classes: Qkmaxware::Rendering::GradientSkybox","title":"Class Qkmaxware::Rendering::Skybox"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_skybox/#public-functions","text":"Type Name virtual Color GetPixel ( BaseCamera camera, int x, int y) Get the skybox colour for the given camera","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_skybox/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_skybox/#function-getpixel","text":"inline virtual Color Qkmaxware::Rendering::Skybox::GetPixel ( BaseCamera camera, int x, int y ) Parameters: camera camera x pixel x y pixel y Returns: skybox color for camera pixel The documentation for this class was generated from the following file Render/src/Skybox.cs","title":"function GetPixel"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/","text":"Class Qkmaxware::Rendering::TexturedMaterial Class List > Qkmaxware > Rendering > TexturedMaterial Base class for a material with a single texture Inherits the following classes: Qkmaxware::Rendering::Material Inherited by the following classes: Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitTexture Public Attributes Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Protected Attributes Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1) Protected Functions Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates Public Attributes Documentation variable Texture Color [,] Qkmaxware.Rendering.TexturedMaterial.Texture; variable WrapMode TextureWrapMode Qkmaxware.Rendering.TexturedMaterial.WrapMode; Public Functions Documentation function TexturedMaterial inline Qkmaxware::Rendering::TexturedMaterial::TexturedMaterial ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) Parameters: texture texture wrap texturing sampling mode Protected Attributes Documentation variable TextureHeight int Qkmaxware.Rendering.TexturedMaterial.TextureHeight; variable TextureWidth int Qkmaxware.Rendering.TexturedMaterial.TextureWidth; Protected Functions Documentation function ColourSample inline Color Qkmaxware::Rendering::TexturedMaterial::ColourSample ( Vec2 uv ) Parameters: uv UV coordinates between 0 and 1 Returns: texture colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#class-qkmaxwarerenderingtexturedmaterial","text":"Class List > Qkmaxware > Rendering > TexturedMaterial Base class for a material with a single texture Inherits the following classes: Qkmaxware::Rendering::Material Inherited by the following classes: Qkmaxware::Rendering::DiffuseTexture , Qkmaxware::Rendering::UnlitTexture","title":"Class Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-attributes","text":"Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-functions","text":"Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#protected-attributes","text":"Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1)","title":"Protected Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#protected-functions","text":"Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#variable-texture","text":"Color [,] Qkmaxware.Rendering.TexturedMaterial.Texture;","title":"variable Texture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#variable-wrapmode","text":"TextureWrapMode Qkmaxware.Rendering.TexturedMaterial.WrapMode;","title":"variable WrapMode"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#function-texturedmaterial","text":"inline Qkmaxware::Rendering::TexturedMaterial::TexturedMaterial ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) Parameters: texture texture wrap texturing sampling mode","title":"function TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#variable-textureheight","text":"int Qkmaxware.Rendering.TexturedMaterial.TextureHeight;","title":"variable TextureHeight"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#variable-texturewidth","text":"int Qkmaxware.Rendering.TexturedMaterial.TextureWidth;","title":"variable TextureWidth"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_textured_material/#function-coloursample","text":"inline Color Qkmaxware::Rendering::TexturedMaterial::ColourSample ( Vec2 uv ) Parameters: uv UV coordinates between 0 and 1 Returns: texture colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"function ColourSample"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/","text":"Class Qkmaxware::Rendering::UV Class List > Qkmaxware > Rendering > UV Mapping of vertices to 2D UV coordinates Inherits the following classes: Qkmaxware::Rendering::IUvMap , IEnumerable< Vec2 > Public Functions Type Name void AddMapping (Vec3 key, Vec2 value) Add a mapping between vertex and UV coordinate IEnumerator< Vec2 > GetEnumerator () void RemoveMapping (Vec3 key) Remove a mapping UV () Empty UV map UV (IEnumerable< KeyValuePair< Vec3, Vec2 >> keys) UV map with existing mappings Public Static Functions Type Name UV Spherical (IEnumerable< Triangle > triangles) Create a UV map from a spherical projection Public Functions Documentation function AddMapping inline void Qkmaxware::Rendering::UV::AddMapping ( Vec3 key, Vec2 value ) Parameters: key vertex value UV coordinates function GetEnumerator [1/2] inline IEnumerator< Vec2 > Qkmaxware::Rendering::UV::GetEnumerator () function RemoveMapping inline void Qkmaxware::Rendering::UV::RemoveMapping ( Vec3 key ) Parameters: key vertex function UV [1/2] inline Qkmaxware::Rendering::UV::UV () function UV [2/2] inline Qkmaxware::Rendering::UV::UV ( IEnumerable< KeyValuePair< Vec3, Vec2 >> keys ) Parameters: keys mapping Public Static Functions Documentation function Spherical static inline UV Qkmaxware::Rendering::UV::Spherical ( IEnumerable< Triangle > triangles ) Parameters: triangles geometry to map Returns: UV map The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"Class Qkmaxware::Rendering::UV"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#class-qkmaxwarerenderinguv","text":"Class List > Qkmaxware > Rendering > UV Mapping of vertices to 2D UV coordinates Inherits the following classes: Qkmaxware::Rendering::IUvMap , IEnumerable< Vec2 >","title":"Class Qkmaxware::Rendering::UV"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#public-functions","text":"Type Name void AddMapping (Vec3 key, Vec2 value) Add a mapping between vertex and UV coordinate IEnumerator< Vec2 > GetEnumerator () void RemoveMapping (Vec3 key) Remove a mapping UV () Empty UV map UV (IEnumerable< KeyValuePair< Vec3, Vec2 >> keys) UV map with existing mappings","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#public-static-functions","text":"Type Name UV Spherical (IEnumerable< Triangle > triangles) Create a UV map from a spherical projection","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-addmapping","text":"inline void Qkmaxware::Rendering::UV::AddMapping ( Vec3 key, Vec2 value ) Parameters: key vertex value UV coordinates","title":"function AddMapping"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-getenumerator-12","text":"inline IEnumerator< Vec2 > Qkmaxware::Rendering::UV::GetEnumerator ()","title":"function GetEnumerator [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-removemapping","text":"inline void Qkmaxware::Rendering::UV::RemoveMapping ( Vec3 key ) Parameters: key vertex","title":"function RemoveMapping"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-uv-12","text":"inline Qkmaxware::Rendering::UV::UV ()","title":"function UV [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-uv-22","text":"inline Qkmaxware::Rendering::UV::UV ( IEnumerable< KeyValuePair< Vec3, Vec2 >> keys ) Parameters: keys mapping","title":"function UV [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_u_v/#function-spherical","text":"static inline UV Qkmaxware::Rendering::UV::Spherical ( IEnumerable< Triangle > triangles ) Parameters: triangles geometry to map Returns: UV map The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"function Spherical"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/","text":"Class Qkmaxware::Rendering::UnlitColour Class List > Qkmaxware > Rendering > UnlitColour Solid colour material with no shading Inherits the following classes: Qkmaxware::Rendering::Material Public Attributes Type Name Color Colour = = Color.White Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface UnlitColour (Color colour) New unlit colour material Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Public Attributes Documentation variable Colour Color Qkmaxware.Rendering.UnlitColour.Colour; Public Functions Documentation function Edge inline virtual override Color Qkmaxware::Rendering::UnlitColour::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge function Fragment inline virtual override Color Qkmaxware::Rendering::UnlitColour::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment function UnlitColour inline Qkmaxware::Rendering::UnlitColour::UnlitColour ( Color colour ) Parameters: colour material colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::UnlitColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#class-qkmaxwarerenderingunlitcolour","text":"Class List > Qkmaxware > Rendering > UnlitColour Solid colour material with no shading Inherits the following classes: Qkmaxware::Rendering::Material","title":"Class Qkmaxware::Rendering::UnlitColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-attributes","text":"Type Name Color Colour = = Color.White","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-functions","text":"Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface UnlitColour (Color colour) New unlit colour material","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#variable-colour","text":"Color Qkmaxware.Rendering.UnlitColour.Colour;","title":"variable Colour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#function-edge","text":"inline virtual override Color Qkmaxware::Rendering::UnlitColour::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge","title":"function Edge"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#function-fragment","text":"inline virtual override Color Qkmaxware::Rendering::UnlitColour::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment","title":"function Fragment"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_colour/#function-unlitcolour","text":"inline Qkmaxware::Rendering::UnlitColour::UnlitColour ( Color colour ) Parameters: colour material colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"function UnlitColour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/","text":"Class Qkmaxware::Rendering::UnlitTexture Class List > Qkmaxware > Rendering > UnlitTexture Unlit textured material Inherits the following classes: Qkmaxware::Rendering::TexturedMaterial Public Attributes inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface UnlitTexture (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Public Functions inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Protected Attributes inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1) Protected Functions inherited from Qkmaxware::Rendering::TexturedMaterial See Qkmaxware::Rendering::TexturedMaterial Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates Public Functions Documentation function Edge inline virtual override Color Qkmaxware::Rendering::UnlitTexture::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge function Fragment inline virtual override Color Qkmaxware::Rendering::UnlitTexture::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment function UnlitTexture inline Qkmaxware::Rendering::UnlitTexture::UnlitTexture ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::UnlitTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#class-qkmaxwarerenderingunlittexture","text":"Class List > Qkmaxware > Rendering > UnlitTexture Unlit textured material Inherits the following classes: Qkmaxware::Rendering::TexturedMaterial","title":"Class Qkmaxware::Rendering::UnlitTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-attributes-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name Color[,] Texture TextureWrapMode WrapMode = = TextureWrapMode.Clamp","title":"Public Attributes inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-functions","text":"Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual override Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface UnlitTexture (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-functions-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name TexturedMaterial (Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp) Create a textured material with the given texture and sampling mode","title":"Public Functions inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#protected-attributes-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name int TextureHeight = => Texture.GetLength(0) int TextureWidth = => Texture.GetLength(1)","title":"Protected Attributes inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#protected-functions-inherited-from-qkmaxwarerenderingtexturedmaterial","text":"See Qkmaxware::Rendering::TexturedMaterial Type Name Color ColourSample (Vec2 uv) Sample a colour on the given texture at the provided UV coordinates","title":"Protected Functions inherited from Qkmaxware::Rendering::TexturedMaterial"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#function-edge","text":"inline virtual override Color Qkmaxware::Rendering::UnlitTexture::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge","title":"function Edge"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#function-fragment","text":"inline virtual override Color Qkmaxware::Rendering::UnlitTexture::Fragment ( ShaderVariables variables ) Parameters: variables shading variables Returns: color of point on face Implements Qkmaxware::Rendering::Material::Fragment","title":"function Fragment"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_unlit_texture/#function-unlittexture","text":"inline Qkmaxware::Rendering::UnlitTexture::UnlitTexture ( Color texture, TextureWrapMode wrap=TextureWrapMode.Clamp ) The documentation for this class was generated from the following file Render/src/Material.cs","title":"function UnlitTexture"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/","text":"Class Qkmaxware::Rendering::Wireframe Class List > Qkmaxware > Rendering > Wireframe Material for wireframe objects Inherits the following classes: Qkmaxware::Rendering::Material Public Attributes Type Name Color Colour = = Color.White Public Attributes inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling Public Functions Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges Wireframe (Color colour) New wireframe material with colour Public Functions inherited from Qkmaxware::Rendering::Material See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex Public Attributes Documentation variable Colour Color Qkmaxware.Rendering.Wireframe.Colour; Public Functions Documentation function Edge inline virtual override Color Qkmaxware::Rendering::Wireframe::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge function Wireframe inline Qkmaxware::Rendering::Wireframe::Wireframe ( Color colour ) Parameters: colour material colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"Class Qkmaxware::Rendering::Wireframe"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#class-qkmaxwarerenderingwireframe","text":"Class List > Qkmaxware > Rendering > Wireframe Material for wireframe objects Inherits the following classes: Qkmaxware::Rendering::Material","title":"Class Qkmaxware::Rendering::Wireframe"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-attributes","text":"Type Name Color Colour = = Color.White","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-attributes-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name bool TwoSided = = false Two sided materials will not be subject to occlusion culling","title":"Public Attributes inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-functions","text":"Type Name virtual override Color Edge ( ShaderVariables variables) Shader to apply to each face's edges Wireframe (Color colour) New wireframe material with colour","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-functions-inherited-from-qkmaxwarerenderingmaterial","text":"See Qkmaxware::Rendering::Material Type Name virtual Color Edge ( ShaderVariables variables) Shader to apply to each face's edges virtual Color Fragment ( ShaderVariables variables) Shader to apply to each face's surface virtual Color Vert ( ShaderVariables variables) Shader to apply to each vertex","title":"Public Functions inherited from Qkmaxware::Rendering::Material"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#variable-colour","text":"Color Qkmaxware.Rendering.Wireframe.Colour;","title":"variable Colour"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#function-edge","text":"inline virtual override Color Qkmaxware::Rendering::Wireframe::Edge ( ShaderVariables variables ) Parameters: variables shading variables Returns: edge colour Implements Qkmaxware::Rendering::Material::Edge","title":"function Edge"},{"location":"doxygen/class_qkmaxware_1_1_rendering_1_1_wireframe/#function-wireframe","text":"inline Qkmaxware::Rendering::Wireframe::Wireframe ( Color colour ) Parameters: colour material colour The documentation for this class was generated from the following file Render/src/Material.cs","title":"function Wireframe"},{"location":"doxygen/classes/","text":"Class Index a AmbientLight ( Qkmaxware::Rendering ) Angle ( Qkmaxware::Rendering ) AnimatedScene ( Qkmaxware::Rendering ) Aspect16x10 ( Qkmaxware::Rendering::Resolutions ) Aspect16x9 ( Qkmaxware::Rendering::Resolutions ) Aspect4x3 ( Qkmaxware::Rendering::Resolutions ) b BaseCamera ( Qkmaxware::Rendering ) d DiffuseColour ( Qkmaxware::Rendering ) DiffuseTexture ( Qkmaxware::Rendering ) f Facebook ( Qkmaxware::Rendering::Resolutions ) g GradientSkybox ( Qkmaxware::Rendering ) i Icon ( Qkmaxware::Rendering::Resolutions ) Instagram ( Qkmaxware::Rendering::Resolutions ) IAnimator ( Qkmaxware::Rendering ) IUvMap ( Qkmaxware::Rendering ) l LightSource ( Qkmaxware::Rendering ) LinkedIn ( Qkmaxware::Rendering::Resolutions ) m Material ( Qkmaxware::Rendering ) p PerspectiveCamera ( Qkmaxware::Rendering ) PointLight ( Qkmaxware::Rendering ) Pinterest ( Qkmaxware::Rendering::Resolutions ) r Renderable ( Qkmaxware::Rendering ) Resolutions ( Qkmaxware::Rendering ) s Scene ( Qkmaxware::Rendering ) SceneNode ( Qkmaxware::Rendering ) Skybox ( Qkmaxware::Rendering ) ShaderVariables ( Qkmaxware::Rendering ) t Twitter ( Qkmaxware::Rendering::Resolutions ) TexturedMaterial ( Qkmaxware::Rendering ) u UV ( Qkmaxware::Rendering ) UnlitColour ( Qkmaxware::Rendering ) UnlitTexture ( Qkmaxware::Rendering ) w Wireframe ( Qkmaxware::Rendering ) y YouTube ( Qkmaxware::Rendering::Resolutions )","title":"Class Index"},{"location":"doxygen/classes/#class-index","text":"","title":"Class Index"},{"location":"doxygen/classes/#a","text":"AmbientLight ( Qkmaxware::Rendering ) Angle ( Qkmaxware::Rendering ) AnimatedScene ( Qkmaxware::Rendering ) Aspect16x10 ( Qkmaxware::Rendering::Resolutions ) Aspect16x9 ( Qkmaxware::Rendering::Resolutions ) Aspect4x3 ( Qkmaxware::Rendering::Resolutions )","title":"a"},{"location":"doxygen/classes/#b","text":"BaseCamera ( Qkmaxware::Rendering )","title":"b"},{"location":"doxygen/classes/#d","text":"DiffuseColour ( Qkmaxware::Rendering ) DiffuseTexture ( Qkmaxware::Rendering )","title":"d"},{"location":"doxygen/classes/#f","text":"Facebook ( Qkmaxware::Rendering::Resolutions )","title":"f"},{"location":"doxygen/classes/#g","text":"GradientSkybox ( Qkmaxware::Rendering )","title":"g"},{"location":"doxygen/classes/#i","text":"Icon ( Qkmaxware::Rendering::Resolutions ) Instagram ( Qkmaxware::Rendering::Resolutions ) IAnimator ( Qkmaxware::Rendering ) IUvMap ( Qkmaxware::Rendering )","title":"i"},{"location":"doxygen/classes/#l","text":"LightSource ( Qkmaxware::Rendering ) LinkedIn ( Qkmaxware::Rendering::Resolutions )","title":"l"},{"location":"doxygen/classes/#m","text":"Material ( Qkmaxware::Rendering )","title":"m"},{"location":"doxygen/classes/#p","text":"PerspectiveCamera ( Qkmaxware::Rendering ) PointLight ( Qkmaxware::Rendering ) Pinterest ( Qkmaxware::Rendering::Resolutions )","title":"p"},{"location":"doxygen/classes/#r","text":"Renderable ( Qkmaxware::Rendering ) Resolutions ( Qkmaxware::Rendering )","title":"r"},{"location":"doxygen/classes/#s","text":"Scene ( Qkmaxware::Rendering ) SceneNode ( Qkmaxware::Rendering ) Skybox ( Qkmaxware::Rendering ) ShaderVariables ( Qkmaxware::Rendering )","title":"s"},{"location":"doxygen/classes/#t","text":"Twitter ( Qkmaxware::Rendering::Resolutions ) TexturedMaterial ( Qkmaxware::Rendering )","title":"t"},{"location":"doxygen/classes/#u","text":"UV ( Qkmaxware::Rendering ) UnlitColour ( Qkmaxware::Rendering ) UnlitTexture ( Qkmaxware::Rendering )","title":"u"},{"location":"doxygen/classes/#w","text":"Wireframe ( Qkmaxware::Rendering )","title":"w"},{"location":"doxygen/classes/#y","text":"YouTube ( Qkmaxware::Rendering::Resolutions )","title":"y"},{"location":"doxygen/dir_215dca11daae57d51d6f58cd4be0ab9f/","text":"Dir Render/src File List > Render > src Files Type Name file Angle.cs file Animation.cs file BaseCamera.cs file LightSource.cs file Material.cs file PerspectiveCamera.cs file Renderable.cs file Resolutions.cs file Scene.cs file SceneNode.cs file ShaderVariables.cs file Skybox.cs file UvMap.cs The documentation for this class was generated from the following file Render/src/","title":"Dir Render/src"},{"location":"doxygen/dir_215dca11daae57d51d6f58cd4be0ab9f/#dir-rendersrc","text":"File List > Render > src","title":"Dir Render/src"},{"location":"doxygen/dir_215dca11daae57d51d6f58cd4be0ab9f/#files","text":"Type Name file Angle.cs file Animation.cs file BaseCamera.cs file LightSource.cs file Material.cs file PerspectiveCamera.cs file Renderable.cs file Resolutions.cs file Scene.cs file SceneNode.cs file ShaderVariables.cs file Skybox.cs file UvMap.cs The documentation for this class was generated from the following file Render/src/","title":"Files"},{"location":"doxygen/dir_3d93a40d3a63baa1169d25b6af232e01/","text":"Dir Render File List > Render Directories Type Name dir src The documentation for this class was generated from the following file Render/","title":"Dir Render"},{"location":"doxygen/dir_3d93a40d3a63baa1169d25b6af232e01/#dir-render","text":"File List > Render","title":"Dir Render"},{"location":"doxygen/dir_3d93a40d3a63baa1169d25b6af232e01/#directories","text":"Type Name dir src The documentation for this class was generated from the following file Render/","title":"Directories"},{"location":"doxygen/files/","text":"File List Here is a list of all files with brief descriptions: dir Render dir src file Angle.cs file Animation.cs file BaseCamera.cs file LightSource.cs file Material.cs file PerspectiveCamera.cs file Renderable.cs file Resolutions.cs file Scene.cs file SceneNode.cs file ShaderVariables.cs file Skybox.cs file UvMap.cs","title":"File List"},{"location":"doxygen/files/#file-list","text":"Here is a list of all files with brief descriptions: dir Render dir src file Angle.cs file Animation.cs file BaseCamera.cs file LightSource.cs file Material.cs file PerspectiveCamera.cs file Renderable.cs file Resolutions.cs file Scene.cs file SceneNode.cs file ShaderVariables.cs file Skybox.cs file UvMap.cs","title":"File List"},{"location":"doxygen/functions/","text":"Functions","title":"Functions"},{"location":"doxygen/functions/#functions","text":"","title":"Functions"},{"location":"doxygen/hierarchy/","text":"Class Hierarchy This inheritance list is sorted roughly, but not completely, alphabetically: class Qkmaxware::Rendering::Angle Angle manipulations class Qkmaxware::Rendering::Material Base class for all material rendering class Qkmaxware::Rendering::DiffuseColour Diffuse lit solid colour material class Qkmaxware::Rendering::TexturedMaterial Base class for a material with a single texture class Qkmaxware::Rendering::DiffuseTexture Diffuse lit textured material class Qkmaxware::Rendering::UnlitTexture Unlit textured material class Qkmaxware::Rendering::UnlitColour Solid colour material with no shading class Qkmaxware::Rendering::Wireframe Material for wireframe objects class Qkmaxware::Rendering::Skybox Base class for rendering a skybox class Qkmaxware::Rendering::GradientSkybox Skybox with a vertical gradient class Qkmaxware::Rendering::Resolutions Common resolution sizes class Qkmaxware::Rendering::Resolutions::Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Qkmaxware::Rendering::Resolutions::Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Qkmaxware::Rendering::Resolutions::Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Qkmaxware::Rendering::Resolutions::Facebook Resolutions common on Facebook __ class Qkmaxware::Rendering::Resolutions::Icon Resolutions for application icons class Qkmaxware::Rendering::Resolutions::Instagram Resolutions common on Instagram __ class Qkmaxware::Rendering::Resolutions::LinkedIn Resolutions common on LinkedIn __ class Qkmaxware::Rendering::Resolutions::Pinterest Resolutions common on Pinterest __ class Qkmaxware::Rendering::Resolutions::Twitter Resolutions common on Twitter __ class Qkmaxware::Rendering::Resolutions::YouTube Resolutions common on Youtube interface Qkmaxware::Rendering::IUvMap Mapping of vertices to 2D UV coordinates class Qkmaxware::Rendering::UV Mapping of vertices to 2D UV coordinates struct Qkmaxware::Rendering::ShaderVariables Variables that can be used by materials to apply shading interface Qkmaxware::Rendering::IAnimator Animated scene node class IEnumerable< SceneNode > class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::Scene Scene for object management class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class IEnumerable< Color[,]> class Qkmaxware::Rendering::AnimatedScene Animate all animated scene nodes across several frames class IEnumerable< Vec2 > class Qkmaxware::Rendering::UV Mapping of vertices to 2D UV coordinates","title":"Class Hierarchy"},{"location":"doxygen/hierarchy/#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: class Qkmaxware::Rendering::Angle Angle manipulations class Qkmaxware::Rendering::Material Base class for all material rendering class Qkmaxware::Rendering::DiffuseColour Diffuse lit solid colour material class Qkmaxware::Rendering::TexturedMaterial Base class for a material with a single texture class Qkmaxware::Rendering::DiffuseTexture Diffuse lit textured material class Qkmaxware::Rendering::UnlitTexture Unlit textured material class Qkmaxware::Rendering::UnlitColour Solid colour material with no shading class Qkmaxware::Rendering::Wireframe Material for wireframe objects class Qkmaxware::Rendering::Skybox Base class for rendering a skybox class Qkmaxware::Rendering::GradientSkybox Skybox with a vertical gradient class Qkmaxware::Rendering::Resolutions Common resolution sizes class Qkmaxware::Rendering::Resolutions::Aspect16x10 Resolutions with a 16 x 10 aspect ratio class Qkmaxware::Rendering::Resolutions::Aspect16x9 Resolutions with a 16 x 9 aspect ratio class Qkmaxware::Rendering::Resolutions::Aspect4x3 Resolutions with a 4 x 3 aspect ratio class Qkmaxware::Rendering::Resolutions::Facebook Resolutions common on Facebook __ class Qkmaxware::Rendering::Resolutions::Icon Resolutions for application icons class Qkmaxware::Rendering::Resolutions::Instagram Resolutions common on Instagram __ class Qkmaxware::Rendering::Resolutions::LinkedIn Resolutions common on LinkedIn __ class Qkmaxware::Rendering::Resolutions::Pinterest Resolutions common on Pinterest __ class Qkmaxware::Rendering::Resolutions::Twitter Resolutions common on Twitter __ class Qkmaxware::Rendering::Resolutions::YouTube Resolutions common on Youtube interface Qkmaxware::Rendering::IUvMap Mapping of vertices to 2D UV coordinates class Qkmaxware::Rendering::UV Mapping of vertices to 2D UV coordinates struct Qkmaxware::Rendering::ShaderVariables Variables that can be used by materials to apply shading interface Qkmaxware::Rendering::IAnimator Animated scene node class IEnumerable< SceneNode > class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class Qkmaxware::Rendering::Scene Scene for object management class Qkmaxware::Rendering::SceneNode A node which exists within the scene graph class Qkmaxware::Rendering::BaseCamera Base class for a camera that can render a scene class Qkmaxware::Rendering::PerspectiveCamera Camera for perspective rendering class Qkmaxware::Rendering::LightSource Base class for light sources class Qkmaxware::Rendering::AmbientLight Soft light applied from all angles class Qkmaxware::Rendering::PointLight Light applied from a point in space class Qkmaxware::Rendering::Renderable Object that can be rendered by the camera class IEnumerable< Color[,]> class Qkmaxware::Rendering::AnimatedScene Animate all animated scene nodes across several frames class IEnumerable< Vec2 > class Qkmaxware::Rendering::UV Mapping of vertices to 2D UV coordinates","title":"Class Hierarchy"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/","text":"Interface Qkmaxware::Rendering::IAnimator Class List > Qkmaxware > Rendering > IAnimator Animated scene node Public Functions Type Name void OnEarlyUpdate (TimeSpan dt) Called before update void OnLateUpdate (TimeSpan dt) Called after update void OnUpdate (TimeSpan dt) Called during animation update Public Functions Documentation function OnEarlyUpdate inline void Qkmaxware::Rendering::IAnimator::OnEarlyUpdate ( TimeSpan dt ) Parameters: dt time since last update function OnLateUpdate inline void Qkmaxware::Rendering::IAnimator::OnLateUpdate ( TimeSpan dt ) Parameters: dt time since last update function OnUpdate inline void Qkmaxware::Rendering::IAnimator::OnUpdate ( TimeSpan dt ) Parameters: dt time since last update The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Interface Qkmaxware::Rendering::IAnimator"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#interface-qkmaxwarerenderingianimator","text":"Class List > Qkmaxware > Rendering > IAnimator Animated scene node","title":"Interface Qkmaxware::Rendering::IAnimator"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#public-functions","text":"Type Name void OnEarlyUpdate (TimeSpan dt) Called before update void OnLateUpdate (TimeSpan dt) Called after update void OnUpdate (TimeSpan dt) Called during animation update","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#function-onearlyupdate","text":"inline void Qkmaxware::Rendering::IAnimator::OnEarlyUpdate ( TimeSpan dt ) Parameters: dt time since last update","title":"function OnEarlyUpdate"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#function-onlateupdate","text":"inline void Qkmaxware::Rendering::IAnimator::OnLateUpdate ( TimeSpan dt ) Parameters: dt time since last update","title":"function OnLateUpdate"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_animator/#function-onupdate","text":"inline void Qkmaxware::Rendering::IAnimator::OnUpdate ( TimeSpan dt ) Parameters: dt time since last update The documentation for this class was generated from the following file Render/src/Animation.cs","title":"function OnUpdate"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_uv_map/","text":"Interface Qkmaxware::Rendering::IUvMap Class List > Qkmaxware > Rendering > IUvMap Mapping of vertices to 2D UV coordinates Inherited by the following classes: Qkmaxware::Rendering::UV The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"Interface Qkmaxware::Rendering::IUvMap"},{"location":"doxygen/interface_qkmaxware_1_1_rendering_1_1_i_uv_map/#interface-qkmaxwarerenderingiuvmap","text":"Class List > Qkmaxware > Rendering > IUvMap Mapping of vertices to 2D UV coordinates Inherited by the following classes: Qkmaxware::Rendering::UV The documentation for this class was generated from the following file Render/src/UvMap.cs","title":"Interface Qkmaxware::Rendering::IUvMap"},{"location":"doxygen/macros/","text":"Macros","title":"Macros"},{"location":"doxygen/macros/#macros","text":"","title":"Macros"},{"location":"doxygen/modules/","text":"Modules Here is a list of all modules:","title":"Modules"},{"location":"doxygen/modules/#modules","text":"Here is a list of all modules:","title":"Modules"},{"location":"doxygen/namespace_member_enums/","text":"Namespace Member Enums t TextureWrapMode ( Qkmaxware::Rendering )","title":"Namespace Member Enums"},{"location":"doxygen/namespace_member_enums/#namespace-member-enums","text":"","title":"Namespace Member Enums"},{"location":"doxygen/namespace_member_enums/#t","text":"TextureWrapMode ( Qkmaxware::Rendering )","title":"t"},{"location":"doxygen/namespace_member_functions/","text":"Namespace Member Functions","title":"Namespace Member Functions"},{"location":"doxygen/namespace_member_functions/#namespace-member-functions","text":"","title":"Namespace Member Functions"},{"location":"doxygen/namespace_member_typedefs/","text":"Namespace Member Typedefs","title":"Namespace Member Typedefs"},{"location":"doxygen/namespace_member_typedefs/#namespace-member-typedefs","text":"","title":"Namespace Member Typedefs"},{"location":"doxygen/namespace_member_variables/","text":"Namespace Member Variables","title":"Namespace Member Variables"},{"location":"doxygen/namespace_member_variables/#namespace-member-variables","text":"","title":"Namespace Member Variables"},{"location":"doxygen/namespace_members/","text":"Namespace Members t TextureWrapMode ( Qkmaxware::Rendering )","title":"Namespace Members"},{"location":"doxygen/namespace_members/#namespace-members","text":"","title":"Namespace Members"},{"location":"doxygen/namespace_members/#t","text":"TextureWrapMode ( Qkmaxware::Rendering )","title":"t"},{"location":"doxygen/namespace_qkmaxware/","text":"Namespace Qkmaxware Class List > Qkmaxware Namespaces Type Name namespace Rendering 3D Soft-rendering The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Namespace Qkmaxware"},{"location":"doxygen/namespace_qkmaxware/#namespace-qkmaxware","text":"Class List > Qkmaxware","title":"Namespace Qkmaxware"},{"location":"doxygen/namespace_qkmaxware/#namespaces","text":"Type Name namespace Rendering 3D Soft-rendering The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Namespaces"},{"location":"doxygen/namespace_qkmaxware_1_1_geometry/","text":"Namespace Qkmaxware::Geometry Class List > Geometry The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"Namespace Qkmaxware::Geometry"},{"location":"doxygen/namespace_qkmaxware_1_1_geometry/#namespace-qkmaxwaregeometry","text":"Class List > Geometry The documentation for this class was generated from the following file Render/src/BaseCamera.cs","title":"Namespace Qkmaxware::Geometry"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/","text":"Namespace Qkmaxware::Rendering Class List > Qkmaxware > Rendering 3D Soft-rendering Classes Type Name class AmbientLight Soft light applied from all angles class Angle Angle manipulations class AnimatedScene Animate all animated scene nodes across several frames class BaseCamera Base class for a camera that can render a scene class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class GradientSkybox Skybox with a vertical gradient interface IAnimator Animated scene node interface IUvMap Mapping of vertices to 2D UV coordinates class LightSource Base class for light sources class Material Base class for all material rendering class PerspectiveCamera Camera for perspective rendering class PointLight Light applied from a point in space class Renderable Object that can be rendered by the camera class Resolutions Common resolution sizes class Scene Scene for object management class SceneNode A node which exists within the scene graph struct ShaderVariables Variables that can be used by materials to apply shading class Skybox Base class for rendering a skybox class TexturedMaterial Base class for a material with a single texture class UV Mapping of vertices to 2D UV coordinates class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects Public Types Type Name enum TextureWrapMode Texture wrapping mode Public Types Documentation enum TextureWrapMode enum Qkmaxware::Rendering::TextureWrapMode { Clamp, Repeat }; The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Namespace Qkmaxware::Rendering"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/#namespace-qkmaxwarerendering","text":"Class List > Qkmaxware > Rendering 3D Soft-rendering","title":"Namespace Qkmaxware::Rendering"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/#classes","text":"Type Name class AmbientLight Soft light applied from all angles class Angle Angle manipulations class AnimatedScene Animate all animated scene nodes across several frames class BaseCamera Base class for a camera that can render a scene class DiffuseColour Diffuse lit solid colour material class DiffuseTexture Diffuse lit textured material class GradientSkybox Skybox with a vertical gradient interface IAnimator Animated scene node interface IUvMap Mapping of vertices to 2D UV coordinates class LightSource Base class for light sources class Material Base class for all material rendering class PerspectiveCamera Camera for perspective rendering class PointLight Light applied from a point in space class Renderable Object that can be rendered by the camera class Resolutions Common resolution sizes class Scene Scene for object management class SceneNode A node which exists within the scene graph struct ShaderVariables Variables that can be used by materials to apply shading class Skybox Base class for rendering a skybox class TexturedMaterial Base class for a material with a single texture class UV Mapping of vertices to 2D UV coordinates class UnlitColour Solid colour material with no shading class UnlitTexture Unlit textured material class Wireframe Material for wireframe objects","title":"Classes"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/#public-types","text":"Type Name enum TextureWrapMode Texture wrapping mode","title":"Public Types"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/namespace_qkmaxware_1_1_rendering/#enum-texturewrapmode","text":"enum Qkmaxware::Rendering::TextureWrapMode { Clamp, Repeat }; The documentation for this class was generated from the following file Render/src/Angle.cs","title":"enum TextureWrapMode"},{"location":"doxygen/namespace_system/","text":"Namespace System Class List > System The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Namespace System"},{"location":"doxygen/namespace_system/#namespace-system","text":"Class List > System The documentation for this class was generated from the following file Render/src/Angle.cs","title":"Namespace System"},{"location":"doxygen/namespace_system_1_1_collections/","text":"Namespace System::Collections Class List > Collections The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Collections"},{"location":"doxygen/namespace_system_1_1_collections/#namespace-systemcollections","text":"Class List > Collections The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Collections"},{"location":"doxygen/namespace_system_1_1_collections_1_1_generic/","text":"Namespace System::Collections::Generic Class List > Generic The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Collections::Generic"},{"location":"doxygen/namespace_system_1_1_collections_1_1_generic/#namespace-systemcollectionsgeneric","text":"Class List > Generic The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Collections::Generic"},{"location":"doxygen/namespace_system_1_1_drawing/","text":"Namespace System::Drawing Class List > Drawing The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Drawing"},{"location":"doxygen/namespace_system_1_1_drawing/#namespace-systemdrawing","text":"Class List > Drawing The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Drawing"},{"location":"doxygen/namespace_system_1_1_linq/","text":"Namespace System::Linq Class List > Linq The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Linq"},{"location":"doxygen/namespace_system_1_1_linq/#namespace-systemlinq","text":"Class List > Linq The documentation for this class was generated from the following file Render/src/Animation.cs","title":"Namespace System::Linq"},{"location":"doxygen/namespaces/","text":"Namespace List Here is a list of all namespaces with brief descriptions: namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace Geometry namespace System namespace Collections namespace Generic namespace Drawing namespace Linq","title":"Namespace List"},{"location":"doxygen/namespaces/#namespace-list","text":"Here is a list of all namespaces with brief descriptions: namespace Qkmaxware namespace Rendering 3D Soft-rendering namespace Geometry namespace System namespace Collections namespace Generic namespace Drawing namespace Linq","title":"Namespace List"},{"location":"doxygen/pages/","text":"Related Pages Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"doxygen/pages/#related-pages","text":"Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/","text":"Struct Qkmaxware::Rendering::ShaderVariables Class List > Qkmaxware > Rendering > ShaderVariables Variables that can be used by materials to apply shading Public Attributes Type Name IEnumerable< LightSource > LightSources Currently active light sources to account for when rendering Transformation ModelToWorld Matrix from the current object being rendered to world space Vec3 ScreenPixel Position of the pixel on screen being pushed to Vec2 UVCoordinates Coordinates for UV mapping the current pixel Vec3 WorldCameraPosition Position of the camera in world space Vec3 WorldNormal Face normal in world space Vec3 WorldPosition Position of the pixel in world space Transformation WorldToModel = => ModelToWorld.Inverse Matrix from world space to the current object being rendered Public Attributes Documentation variable LightSources IEnumerable<LightSource> Qkmaxware.Rendering.ShaderVariables.LightSources; variable ModelToWorld Transformation Qkmaxware.Rendering.ShaderVariables.ModelToWorld; variable ScreenPixel Vec3 Qkmaxware.Rendering.ShaderVariables.ScreenPixel; variable UVCoordinates Vec2 Qkmaxware.Rendering.ShaderVariables.UVCoordinates; variable WorldCameraPosition Vec3 Qkmaxware.Rendering.ShaderVariables.WorldCameraPosition; variable WorldNormal Vec3 Qkmaxware.Rendering.ShaderVariables.WorldNormal; variable WorldPosition Vec3 Qkmaxware.Rendering.ShaderVariables.WorldPosition; variable WorldToModel Transformation Qkmaxware.Rendering.ShaderVariables.WorldToModel; The documentation for this class was generated from the following file Render/src/ShaderVariables.cs","title":"Struct Qkmaxware::Rendering::ShaderVariables"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#struct-qkmaxwarerenderingshadervariables","text":"Class List > Qkmaxware > Rendering > ShaderVariables Variables that can be used by materials to apply shading","title":"Struct Qkmaxware::Rendering::ShaderVariables"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#public-attributes","text":"Type Name IEnumerable< LightSource > LightSources Currently active light sources to account for when rendering Transformation ModelToWorld Matrix from the current object being rendered to world space Vec3 ScreenPixel Position of the pixel on screen being pushed to Vec2 UVCoordinates Coordinates for UV mapping the current pixel Vec3 WorldCameraPosition Position of the camera in world space Vec3 WorldNormal Face normal in world space Vec3 WorldPosition Position of the pixel in world space Transformation WorldToModel = => ModelToWorld.Inverse Matrix from world space to the current object being rendered","title":"Public Attributes"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-lightsources","text":"IEnumerable<LightSource> Qkmaxware.Rendering.ShaderVariables.LightSources;","title":"variable LightSources"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-modeltoworld","text":"Transformation Qkmaxware.Rendering.ShaderVariables.ModelToWorld;","title":"variable ModelToWorld"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-screenpixel","text":"Vec3 Qkmaxware.Rendering.ShaderVariables.ScreenPixel;","title":"variable ScreenPixel"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-uvcoordinates","text":"Vec2 Qkmaxware.Rendering.ShaderVariables.UVCoordinates;","title":"variable UVCoordinates"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-worldcameraposition","text":"Vec3 Qkmaxware.Rendering.ShaderVariables.WorldCameraPosition;","title":"variable WorldCameraPosition"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-worldnormal","text":"Vec3 Qkmaxware.Rendering.ShaderVariables.WorldNormal;","title":"variable WorldNormal"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-worldposition","text":"Vec3 Qkmaxware.Rendering.ShaderVariables.WorldPosition;","title":"variable WorldPosition"},{"location":"doxygen/struct_qkmaxware_1_1_rendering_1_1_shader_variables/#variable-worldtomodel","text":"Transformation Qkmaxware.Rendering.ShaderVariables.WorldToModel; The documentation for this class was generated from the following file Render/src/ShaderVariables.cs","title":"variable WorldToModel"},{"location":"doxygen/variables/","text":"Variables","title":"Variables"},{"location":"doxygen/variables/#variables","text":"","title":"Variables"}]}